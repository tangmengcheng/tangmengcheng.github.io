(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{266:function(t,a,e){"use strict";e.r(a);var s=e(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"掌握vuex全面实例教程以及工作原理实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#掌握vuex全面实例教程以及工作原理实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 掌握Vuex全面实例教程以及工作原理实现")]),t._v(" "),e("h2",{attrs:{id:"vuex是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" Vuex是什么")]),t._v(" "),e("p",[e("code",[t._v("Vuex")]),t._v("是"),e("code",[t._v("Vue")]),t._v("的状态管理工具，为了更方便实现多个组件共享状态。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://vuex.vuejs.org/vuex.png",alt:""}})]),t._v(" "),e("p",[t._v("Vuex的特点：")]),t._v(" "),e("ol",[e("li",[t._v("Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。")]),t._v(" "),e("li",[t._v("你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地"),e("strong",[t._v("提交 (commit) mutation")]),t._v("。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。")])]),t._v(" "),e("h2",{attrs:{id:"vuex核心功能点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex核心功能点","aria-hidden":"true"}},[t._v("#")]),t._v(" Vuex核心功能点")]),t._v(" "),e("p",[t._v("我们使用Vue脚手架创建一个项目作为本次演练的开发环境。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vue create vuex-demo\n")])])]),e("p",[e("strong",[t._v("注意")]),t._v("：生成项目的时候，记得选中vuex，避免后面手动安装vuex并导入到"),e("code",[t._v("main.js")]),t._v("中。")]),t._v(" "),e("h3",{attrs:{id:"state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#state","aria-hidden":"true"}},[t._v("#")]),t._v(" State")]),t._v(" "),e("p",[t._v("第一步：在仓库store中定义需要全局共享的state变量")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("state: {\n   age: 25\n}\n")])])]),e("p",[t._v("第二步：在对应的组件中获取并显示在页面上")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<p>{{$store.state.age}}</p>\n")])])]),e("h3",{attrs:{id:"getters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getters","aria-hidden":"true"}},[t._v("#")]),t._v(" Getters")]),t._v(" "),e("p",[e("code",[t._v("getters")]),t._v("相当于组件中的"),e("code",[t._v("computed")]),t._v("计算属性。当"),e("code",[t._v("state")]),t._v("中定义的数据发送变化后，"),e("code",[t._v("getters")]),t._v("中的数据会自动跟着变化。")]),t._v(" "),e("p",[t._v("第一步：在仓库store中定义好getters")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("getters: {\n   getAge(state) {\n      return state.age + 1;\n   }\n}\n")])])]),e("p",[t._v("第二步：在对应的组件中获取并显示在页面上")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<p>{{$store.getters.getAge}}</p>\n")])])]),e("h3",{attrs:{id:"mutations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mutations","aria-hidden":"true"}},[t._v("#")]),t._v(" Mutations")]),t._v(" "),e("p",[t._v("第一步：在仓库store中定义需求调用的mutation方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mutations: {\n   incre(state, payload) {\n      state.age += payload.age;\n   }\n}\n")])])]),e("p",[e("strong",[t._v("注意")]),t._v("：参数"),e("code",[t._v("payload")]),t._v("可以是对象。")]),t._v(" "),e("p",[t._v("第二步：在对应组件中定义触发更改状态的模板和方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// template\n<button @click=\"add\">增加</button>\n\n// script\nmethods: {\n   add() {\n      this.$store.commit('incre', {age: 1});\n   }\n}\n")])])]),e("p",[e("strong",[t._v("注意")]),t._v("：'incre'名称一定要和"),e("code",[t._v("mutations")]),t._v("中定义的名称一样。")]),t._v(" "),e("h3",{attrs:{id:"actions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#actions","aria-hidden":"true"}},[t._v("#")]),t._v(" Actions")]),t._v(" "),e("p",[t._v("第一步：在仓库store中定义需求调用的mutation方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("actions: {\n   increAsyn({commit}, payload) {\n      commit('incre', payload);\n   }\n}\n")])])]),e("p",[t._v("第二步：在对应组件中定义触发更改状态的模板和方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// template\n<button @click=\"addAsyn\">异步增加</button>\n\n// script\naddAsyn() {\n   this.$store.dispatch('increAsyn', {age: 1});\n}\n")])])]),e("p",[e("strong",[t._v("注意")]),t._v("："),e("code",[t._v("mutations")]),t._v(" 必须是同步函数，"),e("code",[t._v("actions")]),t._v("可以为异步函数。")]),t._v(" "),e("h3",{attrs:{id:"modules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#modules","aria-hidden":"true"}},[t._v("#")]),t._v(" Modules")]),t._v(" "),e("p",[t._v("第一步：在仓库store中定义不同的模块以及modules方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const moduleA = {\n  state: {\n    name: 'txm',\n    age: 25\n  },\n  getters: {},\n  mutations: {},\n  actions: {}\n}\n\nconst moduleB = {\n  state: {\n    name: 'sxm',\n    age: 22\n  },\n  getters: {},\n  mutations: {},\n  actions: {}\n}\n\nmodules: {\n    a: moduleA,\n    b: moduleB\n}\n")])])]),e("p",[t._v("第二步：在对应的组件中获取并显示在页面上")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<p>{{$store.state.a.age}}</p>\n<p>{{$store.state.b.age}}</p>\n")])])]),e("h2",{attrs:{id:"辅助函数的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#辅助函数的使用","aria-hidden":"true"}},[t._v("#")]),t._v(" 辅助函数的使用")]),t._v(" "),e("h3",{attrs:{id:"mapstate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mapstate","aria-hidden":"true"}},[t._v("#")]),t._v(" mapState")]),t._v(" "),e("p",[t._v("第一步：在对应的组件中从"),e("code",[t._v("vuex")]),t._v("取出"),e("code",[t._v("mapState")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import {mapState} from 'vuex';\n")])])]),e("p",[t._v("若计算属性只为获取仓库store的状态，则可以使用以上方式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("computed: mapState([\n    'age'\n])\n")])])]),e("p",[t._v("若即想获取仓库store里的状态又可以自定义组件的计算属性，则可以使用以上方式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("computed: {\n   ...mapState([\n      'age'\n   ])\n}\n")])])]),e("p",[t._v("第二步：在对应的组件中获取并显示在页面上")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<p>{{age}}</p>\n")])])]),e("h3",{attrs:{id:"mapgetters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mapgetters","aria-hidden":"true"}},[t._v("#")]),t._v(" mapGetters")]),t._v(" "),e("p",[t._v("第一步：在对应的组件中从"),e("code",[t._v("vuex")]),t._v("取出"),e("code",[t._v("mapGetters")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import {mapGetters} from 'vuex';\n")])])]),e("p",[t._v("通过组件中的计算属性进行获取：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("computed: {\n   ...mapGetters([\n      'getAge'\n   ])\n}\n")])])]),e("p",[t._v("第二步：在对应的组件中获取并显示在页面上")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<p>{{getAge}}</p>\n")])])]),e("h3",{attrs:{id:"mapmutations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mapmutations","aria-hidden":"true"}},[t._v("#")]),t._v(" mapMutations")]),t._v(" "),e("p",[t._v("第一步：在对应的组件中从"),e("code",[t._v("vuex")]),t._v("取出"),e("code",[t._v("mapMutations")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import {mapMutations} from 'vuex';\n")])])]),e("p",[t._v("在组件的methods属性中获取仓库store中的mutations方法，然后在methods里对应的方法中执行也可以携带参数。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("methods: {\n    add() {\n      // this.$store.commit('incre', {age: 1});\n      this.incre({age: 1});\n    },\n    ...mapMutations([\n      'incre'\n    ])\n}\n")])])]),e("p",[t._v("第二步：在对应组件中点击页面按钮看见状态的变化。")]),t._v(" "),e("h3",{attrs:{id:"mapactions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mapactions","aria-hidden":"true"}},[t._v("#")]),t._v(" mapActions")]),t._v(" "),e("p",[t._v("第一步：在对应的组件中从"),e("code",[t._v("vuex")]),t._v("取出"),e("code",[t._v("mapActions")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import {mapActions} from 'vuex';\n")])])]),e("p",[t._v("在组件的methods属性中获取仓库store中的actions方法，然后在methods里对应的方法中执行也可以携带参数。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("methods: {\n   addAsyn() {\n      // this.$store.dispatch('increAsyn', {age: 1});\n      this.increAsyn({age: 1});\n   },\n   ...mapActions([\n      'increAsyn'\n   ])\n}\n")])])]),e("h2",{attrs:{id:"实现简易的vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现简易的vuex","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现简易的Vuex")]),t._v(" "),e("p",[t._v("由于Vue插件的限制，插件必须提供一个"),e("code",[t._v("install")]),t._v("方法，所以需要暴露一个"),e("code",[t._v("install")]),t._v("方法出去。在该方法中使用"),e("code",[t._v("mixin")]),t._v("结合"),e("code",[t._v("beforeCreate")]),t._v("钩子函数让所有组件都拥有"),e("code",[t._v("$store")]),t._v("属性。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let Vue;\nclass Store {\n    constructor(options = {}) {\n        this.vm = new Vue({\n            data: {\n                state: options.state\n            }\n        })\n        let getters = options.getters;\n\n        this.getters = {}\n        Object.keys(getters).forEach(getterName => {\n            Object.defineProperty(this.getters, getterName, {\n                get: () => {\n                    return getters[getterName](this.state)\n                }\n            })\n        })\n        let mutations = options.mutations || {}\n        this.mutations = {}\n        Object.keys(mutations).forEach(mutaitonName => {\n            this.mutations[mutaitonName] = payload => {\n                mutations[mutaitonName](this.state, payload);\n            }\n        })\n        let actions = options.actions || {}\n        this.actions = {}\n        Object.keys(actions).forEach(actionName => {\n            this.actions[actionName] = payload => {\n                actions[actionName](this, payload);\n            }\n        })\n    }\n    commit = (method, payload) => {\n        this.mutations[method](payload);\n    }\n    dispatch(method, payload) {\n        this.actions[method](payload)\n    }\n    get state() {\n        return this.vm.state\n    }\n}\n\nconst install = (_Vue) => {\n    Vue = _Vue;\n    Vue.mixin({\n        beforeCreate() {\n            if(this.$options && this.$options.store) {\n                // 给根实例增加$store属性\n                this.$store = this.$options.store\n            } else {\n                // 有可能单独创建了一个实例没有父亲，那就无法获取到store属性\n                this.$store = this.$parent && this.$parent.$store\n            }\n        }\n    })\n}\nexport default {\n    install,\n    Store\n}\n")])])]),e("p",[e("strong",[t._v("注意")]),t._v("：在实现commit方法时，会存在this指向问题，我们采用箭头函数即可。")]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("上面主要是本人复习简易整理的"),e("code",[t._v("Vuex")]),t._v("的核心用法，方便日后查看，简易有需要的小伙伴和把"),e("code",[t._v("实现简易的Vuex")]),t._v("这小节认值敲几遍。")])])}],!1,null,null,null);a.default=n.exports}}]);