(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{271:function(_,v,e){"use strict";e.r(v);var o=e(0),c=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"_1-说一下-get-和-post-的区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-说一下-get-和-post-的区别？","aria-hidden":"true"}},[_._v("#")]),_._v(" 1. 说一下 GET 和 POST 的区别？")]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("GET")]),_._v(" 在浏览器回退时是 "),e("code",[_._v("无害的")]),_._v("，而 "),e("code",[_._v("POST")]),_._v(" 会 "),e("code",[_._v("再次提交")]),_._v(" 请求")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("GET")]),_._v(" 请求只能进行 "),e("code",[_._v("url 编码")]),_._v("，而 "),e("code",[_._v("POST")]),_._v(" 支持 "),e("code",[_._v("多种编码")]),_._v(" 方式")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("GET")]),_._v(" 请求参数会被完整保留在浏览器历史记录里，而 "),e("code",[_._v("POST")]),_._v(" 中的参数不会保留")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("GET")]),_._v(" 请求参数通过 "),e("code",[_._v("URL 传递")]),_._v(" 且参数是 "),e("code",[_._v("有长度限制")]),_._v(" 的（2083 字符，中文字符的话只有 2083/9=231 个字符），而 "),e("code",[_._v("POST")]),_._v(" 参数放在 "),e("code",[_._v("Request body")]),_._v(" 中是没有限制的")]),_._v(" "),e("p",[e("strong",[_._v("注意")]),_._v("："),e("code",[_._v("HTTP 协议")]),_._v(" 未规定 "),e("code",[_._v("GET")]),_._v(" 和 "),e("code",[_._v("POST")]),_._v(" 的长度限制；"),e("code",[_._v("GET")]),_._v(" 的最大长度显示是因为 "),e("code",[_._v("浏览器")]),_._v(" 和 "),e("code",[_._v("web 服务器")]),_._v(" 限制了 "),e("code",[_._v("URI")]),_._v(" 的长度。不同的 "),e("code",[_._v("浏览器")]),_._v(" 和 "),e("code",[_._v("WEB 服务器")]),_._v("，限制的最大长度不一样，要支持 "),e("code",[_._v("IE")]),_._v("，则最大长度为 2083byte，若只支持 "),e("code",[_._v("Chrome")]),_._v("，则最大长度 8182byte")])]),_._v(" "),e("li",[e("p",[_._v("对参数的数据类型，"),e("code",[_._v("GET")]),_._v(" 只接受 "),e("code",[_._v("ASCII 字符")]),_._v("（如果非 "),e("code",[_._v("ASCII")]),_._v(" 字符会进行 "),e("code",[_._v("转码")]),_._v("），而 "),e("code",[_._v("POST")]),_._v(" 没有限制")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("GET")]),_._v(" 和 "),e("code",[_._v("POST")]),_._v(" 本质上就是 "),e("code",[_._v("TCP 连接")]),_._v(", "),e("code",[_._v("GET")]),_._v(" 产生 "),e("strong",[_._v("一个")]),_._v(" "),e("code",[_._v("TCP 数据包")]),_._v("；"),e("code",[_._v("POST")]),_._v(" 产生 "),e("strong",[_._v("两个")]),_._v(" "),e("code",[_._v("TCP 数据包")])]),_._v(" "),e("p",[e("strong",[_._v("注意")]),_._v("：并不是所有浏览器都会在 "),e("code",[_._v("POST")]),_._v(" 中发送两次包，"),e("code",[_._v("Firefox")]),_._v(" 就只发送一次")]),_._v(" "),e("ol",[e("li",[_._v("对于 "),e("code",[_._v("GET")]),_._v(" 方式的请求，浏览器会把 "),e("code",[_._v("http header")]),_._v(" 和 "),e("code",[_._v("data")]),_._v(" 一并发送出去，服务器响应 200（返回数据）")]),_._v(" "),e("li",[_._v("对于 "),e("code",[_._v("POST")]),_._v("，浏览器先发送 "),e("code",[_._v("header")]),_._v("，服务器响应 "),e("code",[_._v("100 continue")]),_._v("，浏览器再发送 "),e("code",[_._v("data")]),_._v("，服务器响应 200 ok（返回数据）")])])])]),_._v(" "),e("h2",{attrs:{id:"_2-http1-0、http1-1、http2、http3-的区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-http1-0、http1-1、http2、http3-的区别？","aria-hidden":"true"}},[_._v("#")]),_._v(" 2. HTTP1.0、HTTP1.1、HTTP2、HTTP3 的区别？")]),_._v(" "),e("blockquote",[e("p",[_._v("HTTP 1.0(1996 年)")])]),_._v(" "),e("ul",[e("li",[_._v("任意数据类型都可以发送")]),_._v(" "),e("li",[_._v("有 "),e("code",[_._v("GET")]),_._v("、"),e("code",[_._v("POST")]),_._v("、"),e("code",[_._v("HEAD")]),_._v(" 三种方法")]),_._v(" "),e("li",[_._v("无法复用 "),e("code",[_._v("TCP 连接")]),_._v("(长连接)")]),_._v(" "),e("li",[_._v("有丰富的请求响应头信息。以 "),e("code",[_._v("header")]),_._v(" 中的 "),e("code",[_._v("Last-Modified/If-Modified-Since")]),_._v(" 和 "),e("code",[_._v("Expires")]),_._v(" 作为缓存标识")])]),_._v(" "),e("blockquote",[e("p",[_._v("HTTP 1.1(1997 年)")])]),_._v(" "),e("ul",[e("li",[_._v("引入更多的请求方法类型 "),e("code",[_._v("PUT")]),_._v("、"),e("code",[_._v("PATCH")]),_._v("、"),e("code",[_._v("DELETE")]),_._v("、"),e("code",[_._v("OPTIONS")]),_._v("、"),e("code",[_._v("TRACE")]),_._v("、"),e("code",[_._v("CONNECT")])]),_._v(" "),e("li",[_._v("引入 "),e("code",[_._v("长连接")]),_._v("，就是 "),e("code",[_._v("TCP 连接")]),_._v(" 默认不关闭，可以被多个请求复用，通过请求头 "),e("code",[_._v("connection: keep-alive")]),_._v(" 设置")]),_._v(" "),e("li",[_._v("引入 "),e("code",[_._v("管道")]),_._v(" 连接机制，可以在同一 "),e("code",[_._v("TCP")]),_._v(" 连接里，同时发送多个请求")]),_._v(" "),e("li",[_._v("强化了缓存管理和控制 "),e("code",[_._v("Cache-Control")]),_._v("、"),e("code",[_._v("ETag/If-None-Match")])]),_._v(" "),e("li",[_._v("支持 "),e("code",[_._v("分块响应")]),_._v("，"),e("code",[_._v("断点续传")]),_._v("，利于大文件传输，能过请求头中的 "),e("code",[_._v("Range")]),_._v(" 实现")])]),_._v(" "),e("blockquote",[e("p",[_._v("HTTP 2.0(2015 年)")])]),_._v(" "),e("ul",[e("li",[_._v("使用新的 "),e("code",[_._v("二进制协议")]),_._v("，不再是纯文本，避免文本歧义，缩小了请求体积")]),_._v(" "),e("li",[e("code",[_._v("多路复用")]),_._v("，同域名下所有通信都是在单链接(双向数据流)完成，提高连接的复用率，在拥塞控制方面有更好的能力提升")]),_._v(" "),e("li",[_._v("允许服务端主动推送数据给客户端")]),_._v(" "),e("li",[_._v("使用 "),e("code",[_._v("HPACK")]),_._v(" 算法将 "),e("code",[_._v("头部压缩")]),_._v("，用 "),e("code",[_._v("哈夫曼编码")]),_._v(" 建立索表，传送索引大大节约了带宽")])]),_._v(" "),e("blockquote",[e("p",[_._v("HTTP 3.0/QUIC")])]),_._v(" "),e("p",[e("strong",[_._v("缺点")]),_._v("：主要是连接缓慢，服务器只能按顺序响应，如果某个请求花了很长时间，就会出现请求 "),e("code",[_._v("队头阻塞")])]),_._v(" "),e("blockquote",[e("p",[_._v("HTTP1 和 HTTP2")])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("HTTP2")]),_._v(" 是一个 "),e("code",[_._v("二进制协议")]),_._v("，"),e("code",[_._v("HTTP1")]),_._v(" 是 "),e("code",[_._v("超文本协议")]),_._v("，传输的内容都不是一样的")]),_._v(" "),e("li",[e("code",[_._v("HTTP2")]),_._v(" "),e("code",[_._v("报头压缩")]),_._v("，可以使用 "),e("code",[_._v("HPACK")]),_._v(" 进行头部压缩，"),e("code",[_._v("HTTP1")]),_._v(" 则不论什么请求都会发送")]),_._v(" "),e("li",[e("code",[_._v("HTTP2")]),_._v(" 服务端推送("),e("code",[_._v("Server push")]),_._v(")，允许服务器预先将网页所需要的资源 "),e("code",[_._v("push")]),_._v(" 到浏览器的内存当中")]),_._v(" "),e("li",[e("code",[_._v("HTTP2")]),_._v(" 遵循 "),e("code",[_._v("多路复用")]),_._v("，代替同一域名下的内容，只建立一次连接，"),e("code",[_._v("HTTP1.x")]),_._v(" 不是，对域名有 6~8 个连接限制")])]),_._v(" "),e("blockquote",[e("p",[_._v("HTTP 请求方法(9 种)")])]),_._v(" "),e("p",[e("code",[_._v("HTTP1.0")]),_._v("： "),e("code",[_._v("GET")]),_._v("、"),e("code",[_._v("POST")]),_._v("、"),e("code",[_._v("HEAD")])]),_._v(" "),e("p",[e("code",[_._v("HTTP1.1")]),_._v("： "),e("code",[_._v("PUT")]),_._v("、"),e("code",[_._v("PATCH")]),_._v("、"),e("code",[_._v("DELETE")]),_._v("、"),e("code",[_._v("OPTIONS")]),_._v("、"),e("code",[_._v("TRACE")]),_._v("、"),e("code",[_._v("CONNECT")])]),_._v(" "),e("p",[e("code",[_._v("HTTP")]),_._v(" 全称 "),e("code",[_._v("Hyper Text Transfer Protocol")]),_._v("，即超文本传输协议。"),e("code",[_._v("HTTP")]),_._v(" 是一个 "),e("strong",[_._v("应用层协议")]),_._v("。")]),_._v(" "),e("p",[e("code",[_._v("HTTP")]),_._v(" 的报文结构："),e("code",[_._v("请求行")]),_._v(" + "),e("code",[_._v("请求头")]),_._v(" + "),e("code",[_._v("请求体")])]),_._v(" "),e("blockquote",[e("p",[_._v("Accept 字段与 Content-type 字段：")])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("Accept")]),_._v(": 用于客户端向服务器发送报文时表示自己可接收的响应内容类型，如："),e("code",[_._v("Accept: text/plain")]),_._v(" (文本类型)\n"),e("ol",[e("li",[e("code",[_._v("Accept-Charset")]),_._v(": 表示可接收的字符集")]),_._v(" "),e("li",[e("code",[_._v("Accept-Encoding")]),_._v(": 表示可接受的响应内容的压缩方式")]),_._v(" "),e("li",[e("code",[_._v("Accept-Language")]),_._v(": 表示可接受的响应内容语言列表")]),_._v(" "),e("li",[e("code",[_._v("Accept-Datetime")]),_._v(": 表示可接受的按照时间来表示的响应内容版本")])])]),_._v(" "),e("li",[e("code",[_._v("Content-Type")]),_._v(": 字段用于服务器回应时，告诉客户端，本次数据的格式是什么\n"),e("ol",[e("li",[e("code",[_._v("Content-Encoding")]),_._v(": 表示服务器返回的数据使用什么压缩格式")])])]),_._v(" "),e("li",[e("code",[_._v("Host")]),_._v(" 字段: 用于客户端发送请求时，用来指定服务器的域名。例如："),e("code",[_._v("Host: www.baidu.com")])]),_._v(" "),e("li",[e("code",[_._v("Connection")]),_._v(" 字段: 最常用于客户端要求服务器使用 "),e("code",[_._v("TCP")]),_._v(" 持久连接，以便其他请求复用 "),e("code",[_._v("keep-alive")])]),_._v(" "),e("li",[e("code",[_._v("Content-Length")]),_._v(" 字段: 表明本次回应的数据长度")])]),_._v(" "),e("h3",{attrs:{id:"http-存在的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-存在的问题","aria-hidden":"true"}},[_._v("#")]),_._v(" HTTP 存在的问题")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("性能问题")]),_._v(" "),e("p",[_._v("在 "),e("code",[_._v("HTTP/1.0")]),_._v(" 中，每次发起一个 "),e("code",[_._v("HTTP")]),_._v(" 请求，都需要去建立一次 "),e("code",[_._v("TCP 连接")]),_._v("，而且还是串行请求，这使得 "),e("code",[_._v("HTTP")]),_._v(" 在 "),e("code",[_._v("TCP 的连接")]),_._v(" 建立上花费了大量的开销。对于这种问题，"),e("code",[_._v("HTTP/1.1")]),_._v(" 中提出了"),e("strong",[_._v("长连接")]),_._v("的通信方式，也叫"),e("code",[_._v("持久连接")]),_._v("。"),e("strong",[_._v("好处")]),_._v(": 在于减少了 "),e("code",[_._v("TCP 连接")]),_._v(" 的重复建立和断开所造成的额外开销，减轻了服务器端的负载")]),_._v(" "),e("p",[e("code",[_._v("HTTP/1.1")]),_._v(" 采用了 "),e("code",[_._v("长连接")]),_._v(" 的方式，使得"),e("code",[_._v("管道（Pipeline）")]),_._v("网络传输成为了可能。即在同一个 "),e("code",[_._v("TCP 连接")]),_._v(" 里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。"),e("strong",[_._v("但是")]),_._v(" 服务器还是按照顺序，先回应第一个请求，完成后再回应第二个请求，以此类推。要是前面的请求回应得特别慢，后面就会有许多请求阻塞着，这就是所谓的【"),e("strong",[_._v("队头阻塞")]),_._v("】")])])]),_._v(" "),e("p",[e("strong",[_._v("总结")]),_._v("： "),e("code",[_._v("HTTP/1.0")]),_._v(" 或是 "),e("code",[_._v("HTTP/1.1")]),_._v(" 性能都不是很完美")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("安全问题")]),_._v(" "),e("p",[e("code",[_._v("HTTP")]),_._v(" 的内容是 "),e("code",[_._v("明文传输")]),_._v(" 的，明文数据会经过 "),e("code",[_._v("中间代理服务器")]),_._v("、"),e("code",[_._v("路由器")]),_._v("、"),e("code",[_._v("WIFI热点")]),_._v("、"),e("code",[_._v("通信服务运行商")]),_._v(" 等多个物理节点，如果信息在传输过程中被劫持，传输的内容久完全暴露了，劫持者还可以篡改传输的信息且不被双方察觉，这就是 "),e("strong",[_._v("中间人攻击")])]),_._v(" "),e("p",[_._v("总结一下，"),e("code",[_._v("HTTP")]),_._v(" 在安全方面有以下三个问题：")]),_._v(" "),e("ol",[e("li",[_._v("使用明文通信，一些重要的内容会被窃听")]),_._v(" "),e("li",[_._v("不能验证对方身份，可能是伪造的信息")]),_._v(" "),e("li",[_._v("无法验证报文的完整性，有可能被修改")])])])]),_._v(" "),e("blockquote",[e("p",[e("code",[_._v("HTTP/2")]),_._v(" 有哪些改进？")])]),_._v(" "),e("ol",[e("li",[_._v("头部压缩")]),_._v(" "),e("li",[_._v("多路复用")]),_._v(" "),e("li",[_._v("服务器推送")]),_._v(" "),e("li",[_._v("二进制传输")])]),_._v(" "),e("blockquote",[e("p",[_._v("HTTP 的特点和缺点")])]),_._v(" "),e("ul",[e("li",[e("p",[_._v("特点："),e("strong",[_._v("无连接")]),_._v(" ("),e("code",[_._v("请求完就断开，不保持连接")]),_._v(")、"),e("strong",[_._v("无状态")]),_._v(" ("),e("code",[_._v("每个请求都是独立的")]),_._v(")、"),e("strong",[_._v("灵活")]),_._v(" ("),e("code",[_._v("http 协议中头部的 Content-Type 标记，可以传输任意数据类型的数据对象（文本、图像、视频等。比较灵活）")]),_._v(")、"),e("strong",[_._v("简单快速")]),_._v(" ("),e("code",[_._v("请求访问某个资源时，只需传送请求方法和 URL 就可以了，使用简单")]),_._v(")")])]),_._v(" "),e("li",[e("p",[_._v("缺点："),e("strong",[_._v("无状态")]),_._v("、"),e("strong",[_._v("不安全")]),_._v(" ("),e("code",[_._v("明文传输可能被窃听不安全，缺少身份认证也可能遭遇伪装，还有缺少报文完整性验证可能遭到篡改")]),_._v(")、"),e("strong",[_._v("明文传输")]),_._v("、"),e("strong",[_._v("队头阻塞")]),_._v(" ("),e("code",[_._v("一个TCP连接，同一时刻只能处理一个请求，那么当请求耗时过长时，其他请求就只能阻塞状态")]),_._v(")")])]),_._v(" "),e("li",[e("p",[_._v("什么是 "),e("strong",[_._v("持久连接/长连接")]),_._v("?")]),_._v(" "),e("p",[e("code",[_._v("http1.0")]),_._v(' 协议采用的是 "请求-应答" 模式，每个请求/应答客户与服务器都要新建一个连接，完成之后立即断开连接('),e("code",[_._v("http")]),_._v(" 协议为无连接的协议)")]),_._v(" "),e("p",[e("code",[_._v("http1.1")]),_._v(" 版本支持 "),e("code",[_._v("长连接")]),_._v("，即请求头添加 "),e("code",[_._v("Connection: Keep-Alive")]),_._v("，使用 "),e("code",[_._v("Keep-Alive")]),_._v(" 模式(又称 "),e("code",[_._v("持久连接")]),_._v("，"),e("code",[_._v("连接复用")]),_._v(")建立一个 "),e("code",[_._v("TCP")]),_._v(" 连接后使客户端到服务端的连接持续有效，可以发送/接受多个 "),e("code",[_._v("http")]),_._v(" 请求/响应，当出现对服务器的后续请求时，"),e("code",[_._v("Keep-Alive")]),_._v(" 功能避免了建立或者重新建立连接")]),_._v(" "),e("ul",[e("li",[_._v("长连接优缺点?\n"),e("ul",[e("li",[_._v("优点\n"),e("ol",[e("li",[_._v("减少 CPU 及内存的使用，因为不需要经常建立和关闭连接")]),_._v(" "),e("li",[_._v("支持管道化的请求及响应模式")]),_._v(" "),e("li",[_._v("减少网络堵塞，因为减少了 TCP 请求")]),_._v(" "),e("li",[_._v("减少了后续请求的响应时间，因为不需要等待建立 TCP、握手、挥手、关闭 TCP 的过程")]),_._v(" "),e("li",[_._v("发生错误时，也可在不关闭连接的情况下进行错误提示")])])]),_._v(" "),e("li",[_._v("缺点\n"),e("ol",[e("li",[_._v("一个长连接建立后，如果一直保持连接，对服务器来说是多么的浪费资源呀，而且长连接时间的长短，直接影响到服务器的并发数")]),_._v(" "),e("li",[_._v("还有就是可能造成 "),e("code",[_._v("队头堵塞")])])])])])]),_._v(" "),e("li",[_._v("如何避免长连接资源浪费？\n"),e("ol",[e("li",[_._v("客户端请求头声明："),e("code",[_._v("Connection: close")]),_._v("，本次通信后就关闭连接")]),_._v(" "),e("li",[_._v("服务端配置：如 "),e("code",[_._v("Nginx")]),_._v("，设置 "),e("code",[_._v("keepalive_timeout")]),_._v(" 设置 "),e("code",[_._v("长连接超时时间")]),_._v("，"),e("code",[_._v("keepalive_requests")]),_._v(" 设置 "),e("code",[_._v("长连接请求次数上限")])])])])])]),_._v(" "),e("li",[e("p",[_._v("什么是 "),e("strong",[_._v("管线化(管道化)")]),_._v("?")]),_._v(" "),e("p",[e("code",[_._v("请求1 -> 响应1 -> 请求2 -> 响应2 -> 请求3 -> 响应3")])]),_._v(" "),e("p",[e("code",[_._v("请求1 -> 请求2 -> 请求3 -> 响应1 -> 响应2 -> 响应3")])]),_._v(" "),e("p",[e("strong",[_._v("管线化")]),_._v(": 是在同一个 "),e("code",[_._v("TCP 连接")]),_._v("里 "),e("code",[_._v("发一个请求后不必等其回来就可以继续发请求出去")]),_._v("，这可以减少整体的响应时间，但是服务器还是会按照请求的顺序响应请求，所以如果有许多请求，而前面的请求响应很慢，就产生一个著名的问题 "),e("strong",[_._v("队头堵塞")])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("管线化")]),_._v(" 的特点：\n"),e("ol",[e("li",[e("code",[_._v("管线化")]),_._v(" 机制通过 "),e("code",[_._v("持久连接")]),_._v(" 完成，在 "),e("code",[_._v("http1.1")]),_._v(" 版本才支持")]),_._v(" "),e("li",[_._v("只有 "),e("code",[_._v("GET")]),_._v(" 请求和 "),e("code",[_._v("HEAD")]),_._v(" 请求才可以进行管线化，而 "),e("code",[_._v("POST")]),_._v(" 有所限制")]),_._v(" "),e("li",[e("code",[_._v("管线化")]),_._v(" 不会影响响应到来的顺序，响应返回的顺序就是请求的顺序")]),_._v(" "),e("li",[_._v("初次创建连接时不应启动管线化机制，因为服务器不一定支持 "),e("code",[_._v("http1.1")]),_._v(" 版本的协议")])])])])]),_._v(" "),e("li",[e("p",[_._v("如何解决 "),e("code",[_._v("HTTP")]),_._v(" 的 "),e("strong",[_._v("队头阻塞")]),_._v(" 问题?")]),_._v(" "),e("ol",[e("li",[e("p",[e("strong",[_._v("并发连接")]),_._v("\n（现在的浏览器标准中一个域名并发连接可以有 6~8 个，记住是 6~8 个，不是 6 个(Chrome6 个/Firefox8 个)）")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("域名分片")]),_._v("\n（一个域名最多可以并发 6~8 个，那咱就多来几个域名，多准备几个二级域名，可以让不同的资源从不同的二域名中获取，而它们都指向同一台服务器，这样能够并发更多的长连接了）")]),_._v(" "),e("p",[e("strong",[_._v("注意")]),_._v("：在 "),e("code",[_._v("HTTP2.0")]),_._v(" 下，可以一瞬间加载出来很多资源，因为支持 "),e("code",[_._v("多路复用")]),_._v("，可以在"),e("code",[_._v("一个 TCP 连接中发送多个请求")])])])])])]),_._v(" "),e("h2",{attrs:{id:"_3-dns-解析过程及原理？回源是什么？dns-劫持听说过吗？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-dns-解析过程及原理？回源是什么？dns-劫持听说过吗？","aria-hidden":"true"}},[_._v("#")]),_._v(" 3. DNS 解析过程及原理？回源是什么？DNS 劫持听说过吗？")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("解析域名的查找过程：")]),_._v(" "),e("p",[_._v("浏览器的 DNS 缓存 -> 操作系统的 DNS 缓存 -> 本地域名服务器("),e("strong",[_._v("递归查询")]),_._v(" 自己的 DNS 缓存) -> 上级域名服务器(进行"),e("strong",[_._v("迭代查询")]),_._v(")【本地域名服务器 -> 根域名服务器(会返回顶级域名的服务器地址); 本地域名服务器 -> 顶级域名服务器(返回权威域名服务器地址，全球 13 台) 】 -》解析到的 IP 地址返回给操作系统，并缓存起来。-》操作系统将 IP 地址返回给浏览器，并缓存起来，供下次使用。")])])]),_._v(" "),e("p",[e("strong",[_._v("DNS 劫持")]),_._v("，是指通过 "),e("code",[_._v("攻击域名解析服务器")]),_._v("（DNS）或 "),e("code",[_._v("伪造域名解析服务器")]),_._v("（DNS）的方法，把目标网站域名解析到错误的 IP 地址从而实现用户无法访问目标网站的目的或者蓄意或恶意要求用户访问指定 IP 地址（网站）的目的。")]),_._v(" "),e("ul",[e("li",[_._v("通常来说存在三种情况：\n"),e("ol",[e("li",[e("code",[_._v("路由器")]),_._v(" 被入侵")]),_._v(" "),e("li",[e("code",[_._v("DNS 服务器")]),_._v(" 被入侵")]),_._v(" "),e("li",[_._v("运营商流量劫持")])])])]),_._v(" "),e("h2",{attrs:{id:"_4-tcp-和-udp-区别是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-tcp-和-udp-区别是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 4. TCP 和 UDP 区别是什么？")]),_._v(" "),e("p",[e("strong",[_._v("TCP 是一个面向连接的（需要三次握手）、可靠的、基于字节流的传输层协议")]),_._v("。而"),e("strong",[_._v("UDP 是一个面向无连接（无需建立连接）的传输层协议")]),_._v("。(就这么简单，其它 TCP 的特性也就没有了)。")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("和 "),e("code",[_._v("UDP")]),_._v(" 相比，"),e("code",[_._v("TCP")]),_._v(" 有三大核心特性:")]),_._v(" "),e("ol",[e("li",[e("p",[e("strong",[_._v("面向连接")]),_._v("。所谓的连接，指的是客户端和服务器的连接，在双方互相通信之前，"),e("code",[_._v("TCP")]),_._v(" 需要三次握手建立连接，而 "),e("code",[_._v("UDP")]),_._v(" 没有相应建立连接的过程。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("可靠性")]),_._v("。"),e("code",[_._v("TCP")]),_._v(" 花了非常多的功夫保证连接的可靠，这个可靠性体现在哪些方面呢？一个是 "),e("code",[_._v("有状态")]),_._v("，另一个是 "),e("code",[_._v("可控制")]),_._v("。")]),_._v(" "),e("p",[_._v("TCP 会精准记录哪些数据发送了，哪些数据被对方接收了，哪些没有被接收到，而且保证数据包按序到达，不允许半点差错。这是 "),e("strong",[_._v("有状态")]),_._v("。")]),_._v(" "),e("p",[_._v("当意识到 "),e("code",[_._v("丢包了")]),_._v(" 或者 "),e("code",[_._v("网络环境不佳")]),_._v("，TCP 会根据具体情况调整自己的行为，控制自己的 "),e("code",[_._v("发送速度")]),_._v(" 或者 "),e("code",[_._v("重发")]),_._v("。这是 "),e("strong",[_._v("可控制")]),_._v("。")]),_._v(" "),e("p",[_._v("相应的，UDP 就是"),e("code",[_._v("无状态")]),_._v(", "),e("code",[_._v("不可控的")]),_._v("。")]),_._v(" "),e("ul",[e("li",[_._v("为什么可靠？\n"),e("ol",[e("li",[e("code",[_._v("顺序编号")]),_._v("（tcp 在传输文件的时候，会将文件拆分为多个 tcp 数据包，会将这些数据包顺序编号）")]),_._v(" "),e("li",[e("code",[_._v("确认机制")]),_._v("（当数据包成功的被发送方发送给接收方，接收方会根据 tcp 协议反馈给发送方一个成功接收的 ACK 信号，信号中包含了当前包的序号）")]),_._v(" "),e("li",[e("code",[_._v("超时重传")]),_._v("（当发送方发送数据包给接收方时，会为每一个数据包设置一个定时器，当在设定的时间内，发送方仍没有收到接收方的 ACK 信号，会再次发送该数据包，直到收到接收方的 ACK 信号或者连接已断开）")]),_._v(" "),e("li",[e("code",[_._v("校验信息")]),_._v("（tcp 首部校验信息较多，udp 首部校验信息较少）")])])])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("面向字节流")]),_._v("。"),e("code",[_._v("UDP")]),_._v(" 的数据传输是基于"),e("code",[_._v("数据包")]),_._v("的，这是因为仅仅只是继承了 IP 层的特性，而 "),e("code",[_._v("TCP")]),_._v(" 为了维护状态，将一个个 "),e("code",[_._v("IP")]),_._v(" 包变成了 "),e("strong",[_._v("字节流")]),_._v("。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("tcp")]),_._v(" 连接过程中出现的延时增加了被攻击的可能，安全性不高，而 udp 不需要连接，安全性较高")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("tcp")]),_._v(" 是可靠的，保证数据传输的正确性，不易丢包，"),e("code",[_._v("udp")]),_._v(" 是不可靠的，易丢包")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("tcp")]),_._v(" 传输速率较慢，实时性差，"),e("code",[_._v("udp")]),_._v(" 传输速率较快")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("tcp")]),_._v(" 是 "),e("code",[_._v("字节流")]),_._v(" 模式，"),e("code",[_._v("udp")]),_._v(" 是 "),e("code",[_._v("数据包")]),_._v(" 模式")])])])]),_._v(" "),e("li",[e("p",[e("code",[_._v("UDP")]),_._v(" 的特点：")]),_._v(" "),e("ol",[e("li",[e("code",[_._v("无连接")]),_._v(" : 不需要握手和挥手就可以直接发送数据")]),_._v(" "),e("li",[e("code",[_._v("不可靠性")]),_._v(" "),e("ul",[e("li",[_._v("为什么不可靠？\n"),e("ol",[e("li",[_._v("传输数据之前不需要先建立连接")]),_._v(" "),e("li",[_._v("不保证消息交付，远程主机的传输层在接收到 UDP 报文后，不需要确认")]),_._v(" "),e("li",[_._v("不保证将会顺序，不设置包序号、不重排、不会发生队首阻塞")]),_._v(" "),e("li",[_._v("不进行拥塞控制，没有内置反馈机制，不重传、无超时")])])])])]),_._v(" "),e("li",[e("code",[_._v("支持广播")])]),_._v(" "),e("li",[e("code",[_._v("首部开销小")]),_._v(": (tcp 建立连接需要耗时，并且 tcp 首部信息太多，每次传输的有用信息较少，实时性差)")]),_._v(" "),e("li",[e("code",[_._v("是面向报文的")])]),_._v(" "),e("li",[e("code",[_._v("无拥塞控制")])])])]),_._v(" "),e("li",[e("p",[e("code",[_._v("tcp/udp")]),_._v(" 的使用场合？")]),_._v(" "),e("ol",[e("li",[_._v("对数据可靠性的要求。"),e("code",[_._v("tcp")]),_._v(" 适用于可靠性高的场合，"),e("code",[_._v("udp")]),_._v(" 适用于可靠性低的场合")]),_._v(" "),e("li",[_._v("应用的实时性。"),e("code",[_._v("tcp")]),_._v(" 有延时较大，"),e("code",[_._v("udp")]),_._v(" 延时较小")]),_._v(" "),e("li",[_._v("网络的可靠性。网络不好的情况下使用 "),e("code",[_._v("tcp")]),_._v("，网络条件好的情况下，使用 "),e("code",[_._v("udp")])])]),_._v(" "),e("p",[e("code",[_._v("UDP")]),_._v(" 适用于 "),e("code",[_._v("实时应用")]),_._v("，例如：视频会议、直播等。"),e("code",[_._v("TCP")]),_._v(" 适用于要求 "),e("code",[_._v("可靠性传输")]),_._v(" 的应用，例如：文件传输等。")])])]),_._v(" "),e("h2",{attrs:{id:"_5-如何理解-tcp-ip-五层模型-osi-七层模型？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-如何理解-tcp-ip-五层模型-osi-七层模型？","aria-hidden":"true"}},[_._v("#")]),_._v(" 5. 如何理解 TCP/IP 五层模型 OSI 七层模型？")]),_._v(" "),e("blockquote",[e("p",[_._v("TCP/IP 五层模型（应、传、网、数、物）")])]),_._v(" "),e("ol",[e("li",[_._v("应用层：最高层，提供特定于应用程序的协议，运行在该层的协议有 HTTP、FTP、SSH、WebSocket 等")]),_._v(" "),e("li",[_._v("传输层：为两个主机进程通信提供通用的数据传输协议，如 TCP、UDP")]),_._v(" "),e("li",[_._v("网络层：负责寻址和路由功能，将数据包发送到特定的计算机，主要协议是 IP 协议，路由器就是在这一层")]),_._v(" "),e("li",[_._v("数据链路层：负责将二进制数据包和网络信号相互转换，交换机、网卡就是在这一层(PPP 协议)")]),_._v(" "),e("li",[_._v("物理层：主要有接收器、发送器、中继器、光纤电缆等")])]),_._v(" "),e("blockquote",[e("p",[_._v("OSI 七层模型（应、表、会、传、网、数、物）")])]),_._v(" "),e("ol",[e("li",[_._v("应用层")]),_._v(" "),e("li",[_._v("表示层")]),_._v(" "),e("li",[_._v("会话层")]),_._v(" "),e("li",[_._v("传输层")]),_._v(" "),e("li",[_._v("网络层")]),_._v(" "),e("li",[_._v("数据链路层")]),_._v(" "),e("li",[_._v("物理层")])]),_._v(" "),e("h2",{attrs:{id:"_6-为什么-https-比-http-安全？https-是如何保证安全的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-为什么-https-比-http-安全？https-是如何保证安全的？","aria-hidden":"true"}},[_._v("#")]),_._v(" 6. 为什么 HTTPS 比 HTTP 安全？HTTPS 是如何保证安全的？")]),_._v(" "),e("p",[_._v("HTTPS 在 HTTP 的基础上增加了"),e("code",[_._v("加密处理")]),_._v("、"),e("code",[_._v("认证机制")]),_._v("和"),e("code",[_._v("完整性保护")]),_._v("，我们可以将  "),e("code",[_._v("HTTPS = HTTP + 加密 + 认证 + 完整性保护")])]),_._v(" "),e("ul",[e("li",[e("p",[_._v("加密")]),_._v(" "),e("p",[_._v("因为 "),e("code",[_._v("HTTP")]),_._v(" 使用明文传输，中间会经过多个物理节点，可能会被劫持窃听，针对这一问题，"),e("code",[_._v("HTTPS")]),_._v(" 采用了加密的方式解决")]),_._v(" "),e("ol",[e("li",[e("p",[e("strong",[_._v("对称加密")])]),_._v(" "),e("p",[_._v("就是拥有一个密钥，在内容被进行加密后，需要用同一个密钥对加密内容进行解密，才能看到原本的内容。可以看作我们日常生活中的钥匙。"),e("strong",[_._v("注意")]),_._v("：密钥在浏览器和服务器之间传输时，可能被"),e("code",[_._v("截取")]),_._v("，因此引入"),e("code",[_._v("非对称加密")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("非对称加密")])]),_._v(" "),e("p",[_._v("非对称加密有两把密钥，通常一把叫做公钥，另外一把叫做私钥。用公钥加密的内容必须用私钥才能解开，同样的，私钥加密的内容需要用公钥才能解开。"),e("code",[_._v("公钥加密私钥解密（数据加密） 也可用私钥加密公钥解密（签名）")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("改良版非对称加密")])]),_._v(" "),e("p",[_._v("通过一组公钥、私钥已经能保证单个方向传输的安全性，那用两组公钥私钥是不是就能保证双向传输都安全了（HTTPS 的加密却没有使用这种方案）。"),e("strong",[_._v("注意")]),_._v("：原因是非对称加密算法"),e("code",[_._v("非常耗时")]),_._v("，特别是加密解密一些较大数据的时候有些力不从心。相反，对称加密就要快很多。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("混合加密")]),_._v("（HTTPS 采用这种方式加密）")]),_._v(" "),e("p",[e("strong",[_._v("思路")]),_._v("：我们在传递过程把我们的 "),e("code",[_._v("对称加密")]),_._v(" 中的 "),e("code",[_._v("密钥")]),_._v(" 用 "),e("code",[_._v("非对称加密")]),_._v(" 的方式去传递")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("“"),e("code",[_._v("对称加密")]),_._v(" + "),e("code",[_._v("非对称加密")]),_._v("”结合的形式来实现对 HTTP 的加密")]),_._v(" "),e("ol",[e("li",[_._v("客户端生成 "),e("code",[_._v("会话秘钥")]),_._v(" 就是我们 "),e("code",[_._v("对称加密生成的密钥")])]),_._v(" "),e("li",[_._v("它用 "),e("code",[_._v("公钥加密")]),_._v(" 之后进行传递(这个时候被加密的不是数据 是这个会话秘钥 等于把钥匙加密了) 这里的 "),e("code",[_._v("公钥")]),_._v(" 就是 "),e("code",[_._v("非对称加密中的公钥")]),_._v(" 他是由服务器传递过去的（"),e("code",[_._v("对外公开")]),_._v("）")]),_._v(" "),e("li",[_._v("服务端用 "),e("code",[_._v("非对称加密")]),_._v(" 的 "),e("code",[_._v("私钥")]),_._v(" 去 "),e("code",[_._v("解密")]),_._v(" 拿到我们的 "),e("code",[_._v("会话秘钥")])]),_._v(" "),e("li",[_._v("客户端和服务端都能用同一个会话秘钥进行加解密了")])])])])])]),_._v(" "),e("p",[_._v("就算传输过程被攻击者截取到了被加密的会话秘钥 他没有服务器的私钥是无法得到会话秘钥的。上一步我们已经解决了 "),e("code",[_._v("数据加密")]),_._v(" 的问题 虽然攻击者无法 "),e("code",[_._v("解密数据")]),_._v(" 但是他可以"),e("strong",[_._v("篡改数据")]),_._v(" 我们怎么知道数据没被动过呢？")])]),_._v(" "),e("li",[e("p",[_._v("认证")]),_._v(" "),e("ol",[e("li",[e("strong",[_._v("中间人攻击")]),_._v(" "),e("ol",[e("li",[_._v("某网站拥有用于 "),e("code",[_._v("非对称加密")]),_._v(" 的"),e("code",[_._v("公钥 A")]),_._v("、"),e("code",[_._v("私钥 A")]),_._v("；")]),_._v(" "),e("li",[_._v("浏览器向网站服务器发起请求，服务器把 "),e("code",[_._v("公钥 A")]),_._v(" 明文给传输浏览器；")]),_._v(" "),e("li",[e("code",[_._v("中间人劫持到公钥 A，保存下来，把数据包中的公钥 A 替换成自己伪造的公钥 B（它当然也拥有公钥 B 对应的私钥 B’）；")])]),_._v(" "),e("li",[_._v("浏览器随机生成一个用于 "),e("code",[_._v("对称加密")]),_._v(" 的 "),e("code",[_._v("密钥 X")]),_._v("，用 "),e("code",[_._v("公钥 B")]),_._v("（浏览器不知道公钥被替换了）加密后传给服务器；")]),_._v(" "),e("li",[e("code",[_._v("中间人劫持后用私钥 B’ 解密得到密钥 X，再用公钥 A 将 X 加密后传给服务器；")])]),_._v(" "),e("li",[_._v("服务器拿到后用 "),e("code",[_._v("私钥 A")]),_._v(" 解密得到 "),e("code",[_._v("密钥 X")]),_._v("。\n"),e("img",{attrs:{src:"https://s3.51cto.com/images/blog/202106/03/b8077653c5d3239dd98afdeca17927c7.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=",alt:""}})])])])]),_._v(" "),e("p",[_._v("在双方都不会发生异常的情况下，中间人得到了 "),e("code",[_._v("密钥 X")]),_._v("，这其中的根本原因就是"),e("strong",[_._v("浏览器无法确认自己收到的公钥是不是网站的")]),_._v(", 如何解决这一问题呢？ - "),e("strong",[_._v("数字证书")])]),_._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[e("strong",[_._v("数字证书")]),_._v("（解决 "),e("code",[_._v("身份伪装")]),_._v(" 问题）")]),_._v(" "),e("p",[_._v("如何证明浏览器收到的公钥一定是该网站的公钥？")]),_._v(" "),e("p",[_._v("这里就需要有一个 "),e("code",[_._v("公信机构")]),_._v(" 给网站颁发一个“身份证”了。网站在使用 HTTPS 前，需要向 "),e("code",[_._v("“CA 机构”")]),_._v(" 申请颁发一份 "),e("code",[_._v("数字证书")]),_._v("，数字证书里有 "),e("code",[_._v("证书持有者")]),_._v("、"),e("code",[_._v("证书持有者的公钥")]),_._v(" 等信息，服务器把证书传输给浏览器，浏览器从证书里取公钥就行了，证书就如同身份证一样，可以证明“该公钥对应该网站”。")]),_._v(" "),e("p",[_._v("然而到这里还是有一个问题，"),e("code",[_._v("如何保证证书在传输的过程不会被篡改")]),_._v("，"),e("strong",[_._v("身份证本身有防伪的技术")]),_._v("，那么如何保证证书的防伪呢？")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("数字签名")]),_._v("（解决 "),e("code",[_._v("数据篡改")]),_._v(" 问题）")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("如何保证证书不被篡改？")]),_._v(" "),e("p",[_._v("我们把证书内容生成一份“签名”，比对 "),e("code",[_._v("证书内容")]),_._v(" 和 "),e("code",[_._v("签名")]),_._v(" 是否一致就能察觉是否被修改，这种技术就称为: "),e("strong",[_._v("数字签名")])])]),_._v(" "),e("li",[e("p",[_._v("数字签名的制作过程？")]),_._v(" "),e("ol",[e("li",[_._v("CA 拥有 "),e("code",[_._v("非对称加密")]),_._v(" 的 "),e("code",[_._v("私钥")]),_._v(" 和 "),e("code",[_._v("公钥")]),_._v("；")]),_._v(" "),e("li",[_._v("CA 对证书明文信息进行 "),e("code",[_._v("Hash")]),_._v("；")]),_._v(" "),e("li",[_._v("对 "),e("code",[_._v("Hash")]),_._v(" 后的值用 "),e("code",[_._v("私钥")]),_._v(" 加密，得到 "),e("code",[_._v("数字签名 S")]),_._v("；")])]),_._v(" "),e("p",[e("code",[_._v("将明文和数字签名共同组成数字证书，这样一份证书就可以颁发给网站了。")])])]),_._v(" "),e("li",[e("p",[_._v("浏览器得到证书后如何验证这份证书的真实性？")]),_._v(" "),e("ol",[e("li",[_._v("拿到服务器发送过来的证书，得到 "),e("code",[_._v("明文 T")]),_._v("，"),e("code",[_._v("数字签名 S")]),_._v("；")]),_._v(" "),e("li",[_._v("用 "),e("code",[_._v("CA 机构")]),_._v(" 的 "),e("code",[_._v("公钥")]),_._v(" 对 "),e("code",[_._v("S 解密")]),_._v("（由于是浏览器信任的机构，所以浏览器保有 CA 的公钥），得到 "),e("code",[_._v("S")]),_._v("‘；")]),_._v(" "),e("li",[_._v("浏览器用证书说明的 "),e("code",[_._v("Hash 算法")]),_._v(" 对 "),e("code",[_._v("明文 T")]),_._v(" 进行 "),e("code",[_._v("Hash")]),_._v(" 得到 "),e("code",[_._v("T")]),_._v("；")]),_._v(" "),e("li",[_._v("比较 "),e("code",[_._v("S")]),_._v(" 是否等于 "),e("code",[_._v("T")]),_._v("，等于则代表证书可信。")])])]),_._v(" "),e("li",[e("p",[_._v("浏览器如何得到权威机构的公钥？")]),_._v(" "),e("p",[_._v("上面提到，如何要对服务器发过来的证书进行解密，那么就需要到 CA 的公钥，因为其被 CA 的私钥给加密了。那么浏览器是如何拥有 CA 的公钥呢？")]),_._v(" "),e("p",[_._v("实际上权威机构的公钥并不需要传输，因为权威机构会和主流的浏览器或操作系统合作，将他们的公钥内置在浏览器或操作系统环境中。客户端收到证书之后，只需要从证书中找到权威机构的信息，并从本地环境中找到权威机构的公钥，就能正确解密 CA 公钥。")])]),_._v(" "),e("li",[e("p",[_._v("中间人有可能篡改证书吗？("),e("strong",[_._v("不可以")]),_._v(")")])])])])])]),_._v(" "),e("li",[e("p",[_._v("HTTPS 的请求流程")]),_._v(" "),e("ol",[e("li",[_._v("客户端向服务器发起 HTTPS 请求，连接到服务器的 443 端口")]),_._v(" "),e("li",[_._v("服务器端有一个密钥对，即 "),e("code",[_._v("公钥")]),_._v(" 和 "),e("code",[_._v("私钥")]),_._v("，是用来进行非对称加密使用的，服务器端保存着 "),e("code",[_._v("私钥")]),_._v("，不能将其泄露，"),e("code",[_._v("公钥")]),_._v(" 可以发送给任何人")]),_._v(" "),e("li",[_._v("服务器将自己的 "),e("code",[_._v("公钥")]),_._v(" 包含在 "),e("code",[_._v("权威机构发布的证书")]),_._v(" 中发送给客户端")]),_._v(" "),e("li",[_._v("客户端收到服务器端的 "),e("code",[_._v("证书")]),_._v(" 之后，会对证书进行检查，验证其合法性，如果发现发现证书有问题，那么 HTTPS 传输就无法继续。严格的说，这里应该是验证服务器发送的 "),e("code",[_._v("数字证书")]),_._v(" 的合法性，关于客户端如何验证数字证书的合法性。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行 "),e("code",[_._v("对称加密")]),_._v(" 的 "),e("code",[_._v("密钥")]),_._v("，我们将该密钥称之为 "),e("code",[_._v("client key")]),_._v("，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS 中的第一次 HTTP 请求结束；")]),_._v(" "),e("li",[_._v("客户端会发起 HTTPS 中的第二个 HTTP 请求，将被公钥所加密之后的客户端密钥发送给服务器")]),_._v(" "),e("li",[_._v("服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是 "),e("code",[_._v("客户端密钥")]),_._v("，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文")]),_._v(" "),e("li",[_._v("然后服务器用对称加密的密钥（即客户端密钥）对报文进行加密，并将加密后的报文发送给客户端")]),_._v(" "),e("li",[_._v("客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样 HTTPS 中的第二个 HTTP 请求结束，整个 HTTPS 传输完成")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://s4.51cto.com/images/blog/202106/03/df5c8faaaba3b977afa23a588d9b0b2f.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=",alt:""}})])])]),_._v(" "),e("h2",{attrs:{id:"_7-http-常见的状态码有哪些？适用的场景？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-http-常见的状态码有哪些？适用的场景？","aria-hidden":"true"}},[_._v("#")]),_._v(" 7. HTTP 常见的状态码有哪些？适用的场景？")]),_._v(" "),e("ul",[e("li",[_._v("1.xx: 信息类")]),_._v(" "),e("li",[_._v("2.xx: 成功类\n"),e("ol",[e("li",[_._v("【200 OK】：请求成功")]),_._v(" "),e("li",[_._v("【204 No Content】: 与 200 基本相同，但响应头没有 body 数据")]),_._v(" "),e("li",[_._v("【206 Partial Content】: 应用于 HTTP "),e("code",[_._v("分块下载")]),_._v("或 "),e("code",[_._v("断点续传")]),_._v("。表示响应返回的 body 数据并不是资源的全部，而是其中的一分部")])])]),_._v(" "),e("li",[_._v("3.xx: 重定向\n"),e("ol",[e("li",[_._v("【301 Moved Permanently】:永久重定向，说明请求资源不存在了，需改用新的 URL 再次访问")]),_._v(" "),e("li",[_._v("【302 Found】:临时重定向，说明请求资源还在，但暂时需要用另一个 URL 来访问")])])]),_._v(" "),e("li",[_._v("4.xx: 客户端错误\n"),e("ol",[e("li",[_._v("【400 Bad Request】:表示客户端请求报文有错误")]),_._v(" "),e("li",[_._v("【403 Forbidden】: 表示服务器禁止访问资源，并不是客户端请求出错")]),_._v(" "),e("li",[_._v("【404 Not Found】:表示请求资源在服务器上不存在或未找到")])])]),_._v(" "),e("li",[_._v("5.xx: 服务端错误\n"),e("ol",[e("li",[_._v("【500 Internal Server Error】:与 400 类似，是个笼统的错误码，表示服务器发生了错误")]),_._v(" "),e("li",[_._v("【501 No Implement】: 表示客户端请求的功能还不支持")]),_._v(" "),e("li",[_._v("【502 Bad Gatwy】:通常服务器作为网关或代理时返回的错误码")]),_._v(" "),e("li",[_._v("【503 Service Unavailable】: 表示服务器当前很忙，暂时无法响应")])])])]),_._v(" "),e("h2",{attrs:{id:"_8-知道-http-的缓存吗？（浏览器强缓存和协商缓存）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-知道-http-的缓存吗？（浏览器强缓存和协商缓存）","aria-hidden":"true"}},[_._v("#")]),_._v(" 8. 知道 HTTP 的缓存吗？（浏览器强缓存和协商缓存）")]),_._v(" "),e("p",[e("strong",[_._v("强缓存")]),_._v(": 是利用 "),e("code",[_._v("Expires")]),_._v("（"),e("code",[_._v("http1.0")]),_._v("）和 "),e("code",[_._v("Cache-Control")]),_._v("（"),e("code",[_._v("http1.1")]),_._v("）这两个字段来控制的，控制资源缓存的时间，在有效期内不会去向服务器请求了，同时存在，优先 "),e("code",[_._v("Cache-Control")])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("Expires")]),_._v(" 的值为一个 "),e("code",[_._v("绝对时间")]),_._v("（由于 "),e("code",[_._v("Expires")]),_._v(" 是依赖于客户端系统时间，当修改了本地时间后，缓存可能会失效）")]),_._v(" "),e("li",[_._v("给 "),e("code",[_._v("Cache-Control")]),_._v(" 设置 "),e("code",[_._v("max-age")]),_._v(" ，表示缓存的最长时间是多少秒，是一个 "),e("code",[_._v("相对时间")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("Catch-Control")]),_._v(" 的值："),e("code",[_._v("public")]),_._v(" 都缓存；"),e("code",[_._v("private")]),_._v(" 客服端缓存，服务器不缓存；"),e("code",[_._v("no-cache")]),_._v("：表示不进行强缓存，发送 "),e("code",[_._v("HTTP")]),_._v(" 请求，用协商缓存来验证；"),e("code",[_._v("no-store")]),_._v(" 所有内容都不缓存；"),e("code",[_._v("s-maxage")]),_._v("：这和 "),e("code",[_._v("max-age")]),_._v(" 长得比较像，但是"),e("strong",[_._v("区别")]),_._v(": 在于 "),e("code",[_._v("s-maxage")]),_._v(" 是针对 "),e("code",[_._v("代理服务器")]),_._v(" 的缓存时间")])]),_._v(" "),e("p",[e("strong",[_._v("协商缓存")]),_._v(": 是由服务器来确定缓存资源是否可用，是利用 "),e("code",[_._v("Last-Modified")]),_._v("（"),e("code",[_._v("http1.0")]),_._v("）（表示被请求资源在服务器端的最后一次修改时间）/ "),e("code",[_._v("If-Modified-Since")]),_._v(" 和 "),e("code",[_._v("ETag")]),_._v("（每次文件修改后服务端那边会生成一个新的 "),e("code",[_._v("ETag")]),_._v("）/"),e("code",[_._v("if-None-Match")]),_._v(" 来控制的，同时存在，优先 "),e("code",[_._v("ETag")])]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("Last-Modified/if-Modified-Since")]),_._v(" 的"),e("strong",[_._v("缺点")]),_._v("：（文件有可能在 1s 内修改内容、文件内容修改后又复原）")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("ETag")]),_._v(" 性能上的不足, 只要文件发生改变,"),e("code",[_._v("ETag")]),_._v("就会发生改变. "),e("code",[_._v("ETag")]),_._v("需要服务器通过算法来计算出一个 hash 值")])]),_._v(" "),e("li",[e("p",[_._v("缓存位置")]),_._v(" "),e("ol",[e("li",[e("code",[_._v("Service Worker")]),_._v(" "),e("code",[_._v("Service Worker")]),_._v(" 借鉴了 "),e("code",[_._v("Web Worker")]),_._v(" 的 思路，即让 "),e("code",[_._v("JS 运行")]),_._v("在 "),e("code",[_._v("主线程")]),_._v(" 之外，由于它脱离了浏览器的窗体，因此无法直接访问 DOM。虽然如此，但它仍然能帮助我们完成很多有用的功能，比如 "),e("code",[_._v("离线缓存")]),_._v("、"),e("code",[_._v("消息推送")]),_._v(" 和 "),e("code",[_._v("网络代理")]),_._v(" 等功能。其中的离线缓存就是 "),e("code",[_._v("Service Worker Cache")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("Memory Cache")])]),_._v(" "),e("li",[e("code",[_._v("Disk Cache")])]),_._v(" "),e("li",[e("code",[_._v("Push Cache")]),_._v("（HTTP2）")])])])]),_._v(" "),e("p",[_._v("浏览器的本地存储主要分为 "),e("code",[_._v("Cookie")]),_._v("、"),e("code",[_._v("WebStorage")]),_._v(" 和 "),e("code",[_._v("IndexedDB")]),_._v(", 其中 "),e("code",[_._v("WebStorage")]),_._v(" 又可以分为 "),e("code",[_._v("localStorage")]),_._v(" 和 "),e("code",[_._v("sessionStorage")]),_._v("。")]),_._v(" "),e("h2",{attrs:{id:"_9-前端错误的分类有哪些？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-前端错误的分类有哪些？","aria-hidden":"true"}},[_._v("#")]),_._v(" 9. 前端错误的分类有哪些？")]),_._v(" "),e("ul",[e("li",[_._v("前端错误类型：\n"),e("ol",[e("li",[e("code",[_._v("SyntaxError")]),_._v(" (语法错误)")]),_._v(" "),e("li",[e("code",[_._v("ReferenceError")]),_._v(" (引用错误)")]),_._v(" "),e("li",[e("code",[_._v("TypeError")]),_._v(" (类型错误)")]),_._v(" "),e("li",[e("code",[_._v("RangeError")]),_._v(" (范围越界错误)")])])]),_._v(" "),e("li",[_._v("前端错误分类：\n"),e("ol",[e("li",[_._v("代码执行的错误")]),_._v(" "),e("li",[_._v("资源加载的错误")])])]),_._v(" "),e("li",[_._v("前端错误捕获：\n"),e("ol",[e("li",[_._v("try...catch\n能捕获 "),e("code",[_._v("同步运行时")]),_._v(" 错误。不能捕获 "),e("code",[_._v("语法错误")]),_._v("、"),e("code",[_._v("异步任务错误")]),_._v("、"),e("code",[_._v("promise")]),_._v("、"),e("code",[_._v("资源加载错误")]),_._v(" 等")]),_._v(" "),e("li",[_._v("window.onerror\n能捕获所有同步错误、普通的异步错误。不能捕获语法、async 任务、promise 错误和资源加载错误等（例如：iframe）")]),_._v(" "),e("li",[_._v("window.addEventListener('error', function() {})\n可捕获资源加载错误(如果资源加载错误，说明跨域，添加 crossorigin)")]),_._v(" "),e("li",[_._v("window.addEventListener('unhandledrejection', function() {})\n捕获 promise 错误（没有写 "),e("code",[_._v("catch")]),_._v(" 的 "),e("code",[_._v("Promise")]),_._v(" 中抛出的错误无法被 "),e("code",[_._v("onerror")]),_._v(" 或 "),e("code",[_._v("try-catch")]),_._v(" 捕获到。为了防止有漏掉的 Promise 异常，建议在全局增加一个对 "),e("code",[_._v("unhandledrejection")]),_._v(" 的监听，用来全局监听 "),e("code",[_._v("Uncaught Promise Error")]),_._v("）")]),_._v(" "),e("li",[_._v("Vue 项目异常：Vue.config.errorHandler = (err, vm, info) => {}")]),_._v(" "),e("li",[_._v("崩溃和卡顿：利用 "),e("code",[_._v("window")]),_._v(" 对象的 "),e("code",[_._v("load")]),_._v(" 和 "),e("code",[_._v("beforeunload")]),_._v(" 事件")])])]),_._v(" "),e("li",[_._v("总结：\n"),e("ol",[e("li",[_._v("可疑区域使用： "),e("code",[_._v("Try...Catch")])]),_._v(" "),e("li",[_._v("全局监控 JS 异常使用："),e("code",[_._v("window.onerror")])]),_._v(" "),e("li",[_._v("全局监控静态资源异常使用："),e("code",[_._v("window.addEventListener")])]),_._v(" "),e("li",[_._v("捕获没有 catch 的 Promise 异常使用："),e("code",[_._v("unhandledrejection")])]),_._v(" "),e("li",[e("code",[_._v("Vue errorHandler")]),_._v(" 和 "),e("code",[_._v("React componentDidCatch")])]),_._v(" "),e("li",[_._v("监控网页崩溃和卡顿使用："),e("code",[_._v("window")]),_._v(" 对象的 "),e("code",[_._v("loader")]),_._v(" 和 "),e("code",[_._v("beforeunload")])]),_._v(" "),e("li",[_._v("跨域：添加 "),e("code",[_._v("crossOrigin")])])])]),_._v(" "),e("li",[_._v("上报方式有哪些：\n"),e("ol",[e("li",[e("code",[_._v("XMLHttpRequest")]),_._v("\n有跨域限制，携带 cookie 问题；上报请求可能会阻塞业务；请求容易丢失")]),_._v(" "),e("li",[e("code",[_._v("Image")]),_._v("\n可跨域、get 请求，大小限制")]),_._v(" "),e("li",[_._v("SendBean")])])])]),_._v(" "),e("h2",{attrs:{id:"_10-说说为什么前端会有跨域？如何解决跨域？知道-option-请求吗？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-说说为什么前端会有跨域？如何解决跨域？知道-option-请求吗？","aria-hidden":"true"}},[_._v("#")]),_._v(" 10. 说说为什么前端会有跨域？如何解决跨域？知道 option 请求吗？")]),_._v(" "),e("p",[_._v("不同域之间相互请求资源，称为”跨域“；浏览器的 同源策略（同源："),e("code",[_._v("url")]),_._v(" 是由协议、域名、端口和路径等组成。如果两个路径的协议、域名、端口都相同则表示再同一个域上）")]),_._v(" "),e("p",[_._v("在浏览器上 "),e("code",[_._v("script")]),_._v("、"),e("code",[_._v("img")]),_._v("、"),e("code",[_._v("link")]),_._v("、"),e("code",[_._v("iframe")]),_._v(" 等标签都可以加载跨域资源 且不受同源限制")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("非同源限制：")]),_._v(" "),e("ol",[e("li",[_._v("无法读取非同源网页的 Cookie、LocalStorage、IndexedDB")]),_._v(" "),e("li",[_._v("无法接触非同源网页的 DOM")]),_._v(" "),e("li",[_._v("无法向非同源地址发起 ajax 请求")])])]),_._v(" "),e("li",[e("p",[_._v("解决跨域的方式：")]),_._v(" "),e("ol",[e("li",[e("strong",[_._v("设置 document.domain 解决无法读取非同源网页的 Cookie 问题")])])]),_._v(" "),e("p",[_._v("浏览器是通过 "),e("code",[_._v("document.domain")]),_._v(" 属性来检查两个页面是否同源，因此只要通过设置相同的 "),e("code",[_._v("document.domain")]),_._v("，两个页面就可以共享 Cookie。")]),_._v(" "),e("p",[e("strong",[_._v("缺点")]),_._v("：此方案仅限主域相同，子域不同的跨域应用场景")]),_._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[_._v("JSONP")]),_._v(" 是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，兼容性好（兼容低版本 IE），")])]),_._v(" "),e("p",[e("strong",[_._v("缺点")]),_._v("：是只支持 "),e("code",[_._v("get 请求")]),_._v("， 需要后台配合，将返回结果包装成 "),e("code",[_._v("callback(res)")]),_._v("的形式。原理是利用 "),e("code",[_._v("script")]),_._v(" 元素的跨域能力")]),_._v(" "),e("p",[e("strong",[_._v("核心思想")]),_._v("：网页通过添加一个"),e("code",[_._v("script")]),_._v("元素，向服务器请求 "),e("code",[_._v("JSON")]),_._v(" 数据，服务器收到请求后，将数据放在一个指定名字的回调函数的参数位置传回来")]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("原生 js 实现")]),_._v('【请求地址后面添加?callback="xxx",然后在 script 中添加 xxx 方法其参数返回结果】')])]),_._v(" "),e("li",[e("p",[e("code",[_._v("jQuery 的 ajax")]),_._v("【dataType: 'jsonp', 请求方式为 jsonp；jsonpCallback: 'handleCallback' 自定义回调函数】")]),_._v(" "),e("blockquote",[e("p",[_._v("扩展：")])]),_._v(" "),e("ol",[e("li",[e("code",[_._v("script")]),_._v(" 的 "),e("code",[_._v("src")]),_._v(" 和 "),e("code",[_._v("img")]),_._v(" 的 "),e("code",[_._v("src")]),_._v(" 跨域的区别？")])]),_._v(" "),e("p",[_._v("原理上都是利用标签的 "),e("code",[_._v("src")]),_._v(" 可绕过同源限制，跨域请求的特点；"),e("strong",[_._v("区别")]),_._v("在于："),e("code",[_._v("img 只能单向发送 get 请求，不可访问响应内容（只是展现），而 script 可对其进行解析")])]),_._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[_._v("如果黑客植入 "),e("code",[_._v("script")]),_._v(" 脚本通过 "),e("code",[_._v("jsonp")]),_._v(" 的方式对服务器进行攻击，怎么办？")])]),_._v(" "),e("p",[_._v("可以通过页面设置的"),e("code",[_._v("内容安全协议 csp")]),_._v(" 进行防范")]),_._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[_._v("为什么 "),e("code",[_._v("jsonp")]),_._v(" 只支持 "),e("code",[_._v("get")]),_._v(" 请求？")])]),_._v(" "),e("p",[e("code",[_._v("JSONP")]),_._v(" 是一种【请求一段 "),e("code",[_._v("JS 脚本")]),_._v("，把执行这段脚本的结果当做数据】的玩法。")]),_._v(" "),e("p",[e("code",[_._v("JSONP")]),_._v(" 的实现原理就是 "),e("code",[_._v("document.createElement('script')")]),_._v(" 生成一个 "),e("code",[_._v("script 标签")]),_._v("，然后插 "),e("code",[_._v("body")]),_._v(" 里而已。在这里根本没有"),e("code",[_._v("设置请求格式")]),_._v("的余地）. 所以 "),e("code",[_._v("jsonp")]),_._v(" 不会对服务器端代码或者内容做更改")])])]),_._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("p",[e("strong",[_._v("H5 提供的 postMessage")])]),_._v(" "),e("p",[e("code",[_._v("postMessage")]),_._v(" 事件发送消息，"),e("code",[_._v("message")]),_._v(" 事件接受消息")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("跨域资源共享 CORS")]),_._v("【常用】")]),_._v(" "),e("p",[_._v("浏览器将 "),e("code",[_._v("CORS")]),_._v(" 请求分成两类："),e("code",[_._v("简单请求")]),_._v("和"),e("code",[_._v("非简单请求")]),_._v("；当发出简单请求，只需要在头信息之中增加一个 "),e("code",[_._v("Origin 字段")]),_._v("。当发出 "),e("code",[_._v("CORS")]),_._v(" 非简单请求，会在正式通信之前，增加一次 "),e("code",[_._v("OPTIONS")]),_._v(' 查询请求，称为"预检"请求（'),e("code",[_._v("preflight")]),_._v("）。")]),_._v(" "),e("p",[_._v("设置响应头的 "),e("code",[_._v("Access-Control-Allow-Origin： *")])]),_._v(" "),e("ul",[e("li",[_._v("扩展：简单请求同时满足的三个条件？\n"),e("ol",[e("li",[_._v("请求方式只能是："),e("code",[_._v("GET")]),_._v("、"),e("code",[_._v("POST")]),_._v("、"),e("code",[_._v("HEAD")])]),_._v(" "),e("li",[e("code",[_._v("HTTP")]),_._v(" 请求头限制这几种字段："),e("code",[_._v("Accept")]),_._v("、"),e("code",[_._v("Accept-Language")]),_._v("、"),e("code",[_._v("Content-Language")]),_._v("、"),e("code",[_._v("Content-Type")]),_._v("、"),e("code",[_._v("Last-Event-ID")])]),_._v(" "),e("li",[e("code",[_._v("Content-type")]),_._v(" 只能取："),e("code",[_._v("application/x-www-form-urlencoded")]),_._v("(是 Jquery 的 Ajax 请求默认方式)、"),e("code",[_._v("multipart/form-data")]),_._v("、"),e("code",[_._v("text/plain")])])])])]),_._v(" "),e("p",[_._v("预检请求("),e("code",[_._v("preflight")]),_._v(")：浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 "),e("code",[_._v("HTTP")]),_._v(" 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 "),e("code",[_._v("XMLHttpRequest")]),_._v(" 请求，否则就报错。")]),_._v(" "),e("p",[e("strong",[_._v("重点")]),_._v("：服务端如何避免每次都发出预检请求？（"),e("code",[_._v("缓存")]),_._v("）")]),_._v(" "),e("ol",[e("li",[e("code",[_._v("Access-Control-Max-Age")]),_._v(" 该字段可选，用来指定本次预检请求的有效期，单位为秒。在有效期间，不用发出另一条预检请求（全局和局部方式）【常用】")]),_._v(" "),e("li",[e("code",[_._v("@CrossOrigin")]),_._v(" 注解，可细粒度精确到单个请求级别")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("window.name")])]),_._v(" "),e("p",[e("code",[_._v("name")]),_._v("值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 "),e("code",[_._v("name")]),_._v(" 值（2MB）")])]),_._v(" "),e("li",[e("p",[e("strong",[e("code",[_._v("vue")]),_._v(" 中 "),e("code",[_._v("proxy")]),_._v(" 配置本地代理")])]),_._v(" "),e("p",[e("strong",[_._v("扩展")]),_._v("：说说 "),e("code",[_._v("Webpack Proxy")]),_._v(" 工作原理？")]),_._v(" "),e("p",[e("code",[_._v("proxy")]),_._v(" 工作原理实质上是利用 "),e("strong",[_._v("http-proxy-middleware")]),_._v(" 这个 "),e("code",[_._v("http")]),_._v(" 代理中间件，实现请求转发给其他服务器")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("H5 中的 websocket")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("Nginx 代理")])])])])])]),_._v(" "),e("p",[e("strong",[_._v("扩展")]),_._v("：跨域请求如何携带 Cookie?")]),_._v(" "),e("ol",[e("li",[_._v("前端请求时在 "),e("code",[_._v("request")]),_._v(" 对象中配置："),e("code",[_._v("withCredentials: true")])]),_._v(" "),e("li",[_._v("服务端在 "),e("code",[_._v("response")]),_._v(" 的 "),e("code",[_._v("header")]),_._v(" 中配置："),e("code",[_._v('Access-Control-Allow-Origin: "http://xxx.com"')])]),_._v(" "),e("li",[_._v("服务器在 "),e("code",[_._v("response")]),_._v(" 的 "),e("code",[_._v("header")]),_._v(" 中配置："),e("code",[_._v("Access-Control-Allow-Credentials: true")])])]),_._v(" "),e("h2",{attrs:{id:"_11-tcp-三次握手-四次挥手（短连接-长连接）？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-tcp-三次握手-四次挥手（短连接-长连接）？","aria-hidden":"true"}},[_._v("#")]),_._v(" 11. TCP 三次握手 & 四次挥手（短连接 & 长连接）？")]),_._v(" "),e("p",[_._v("三次握手的主要作用，需要确认双方的两样能力: "),e("code",[_._v("发送的能力")]),_._v("和"),e("code",[_._v("接收的能力")]),_._v(" "),e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/170723de9b8aa08b~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp",alt:""}})]),_._v(" "),e("p",[_._v("从最开始双方都处于 "),e("code",[_._v("CLOSED")]),_._v(" 状态。然后服务端开始监听某个端口，进入了 "),e("code",[_._v("LISTEN")]),_._v(" 状态。")]),_._v(" "),e("ol",[e("li",[_._v("客户端给服务端发一个 "),e("code",[_._v("SYN")]),_._v(" 报文，并指明客户端的初始化序列号 "),e("code",[_._v("seq")]),_._v("。此时客户端处于 "),e("code",[_._v("SYN_SEND")]),_._v(" 状态。")]),_._v(" "),e("li",[_._v("服务端接收到，返回 "),e("code",[_._v("SYN")]),_._v(" 和 "),e("code",[_._v("ACK")]),_._v("(对应客户端发来的 SYN)，确认号 "),e("code",[_._v("ack")]),_._v(",自己变成了 "),e("code",[_._v("SYN-REVD")])]),_._v(" "),e("li",[_._v("之后客户端再发送 确认应答 "),e("code",[_._v("ACK")]),_._v(" 报文 给服务端，自己变成了 "),e("code",[_._v("ESTABLISHED")]),_._v(" 状态；服务端收到 "),e("code",[_._v("ACK")]),_._v(" 之后，也变成了 "),e("code",[_._v("ESTABLISHED")]),_._v(" 状态。")])]),_._v(" "),e("ul",[e("li",[e("p",[_._v("为什么不是两次？")]),_._v(" "),e("p",[e("strong",[_._v("根本原因")]),_._v(": "),e("code",[_._v("无法确认客户端的接收能力。")])]),_._v(" "),e("ol",[e("li",[_._v("第一次握手：客户端发送网络包，服务端收到了。服务端就能得出结论："),e("code",[_._v("客户端的发送能力")]),_._v("、"),e("code",[_._v("服务端的接收能力")]),_._v("是正常的")]),_._v(" "),e("li",[_._v("第二次握手：服务端发包，客户端收到了。客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。"),e("strong",[_._v("注意")]),_._v("：此时服务器并不能确认客户端的"),e("code",[_._v("接收能力是否正常")])]),_._v(" "),e("li",[_._v("第三次握手：客户端发包，服务端收到了。服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。")])])]),_._v(" "),e("li",[e("p",[_._v("为什么不是四次？")]),_._v(" "),e("p",[e("strong",[_._v("三次握手的目的")]),_._v(": 是确认双方"),e("code",[_._v("发送")]),_._v("和"),e("code",[_._v("接收")]),_._v("的能力，四次也可以。没必要")])]),_._v(" "),e("li",[e("p",[_._v("什么是半连接队列？")]),_._v(" "),e("p",[_._v("三次握手前，服务端的状态从 "),e("code",[_._v("CLOSED")]),_._v(" 变为 "),e("code",[_._v("LISTEN")]),_._v(", 同时在内部创建了两个队列："),e("code",[_._v("半连接队列")]),_._v(" 和 "),e("code",[_._v("全连接队列")]),_._v("，即 "),e("code",[_._v("SYN 队列")]),_._v(" 和 "),e("code",[_._v("ACCEPT 队列")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("半连接队列")]),_._v(": 当客户端发送 "),e("code",[_._v("SYN")]),_._v(" 到服务端，服务端收到以后回复 "),e("code",[_._v("ACK")]),_._v(" 和 "),e("code",[_._v("SYN")]),_._v("，状态由 "),e("code",[_._v("LISTEN")]),_._v(" 变为 "),e("code",[_._v("SYN_RCVD")]),_._v("，此时这个连接就被推入了 "),e("code",[_._v("SYN 队列")]),_._v("，也就是 "),e("code",[_._v("半连接队列")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("全连接队列")]),_._v(": 就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现 "),e("code",[_._v("丢包")]),_._v(" 现象。")]),_._v(" "),e("p",[e("strong",[_._v("补充一点")]),_._v(" 关于 "),e("code",[_._v("SYN-ACK")]),_._v(" 重传次数的问题：")]),_._v(" "),e("p",[_._v("服务器发送完 "),e("code",[_._v("SYN-ACK 包")]),_._v("，如果未收到客户确认包，服务器进行 "),e("code",[_._v("首次重传")]),_._v("，等待一段时间仍未收到客户确认包，进行第二次重传。如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。")])]),_._v(" "),e("li",[e("p",[_._v("三次握手过程中可以携带数据么？")]),_._v(" "),e("p",[e("code",[_._v("第三次握手的时候，可以携带。前两次握手不能携带数据")]),_._v("。")]),_._v(" "),e("p",[_._v("(假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 "),e("code",[_._v("SYN 报文")]),_._v("中放入大量的数据。这会让服务器花费很多时间、内存空间来接收这些报文。原因就是会让服务器更加容易受到攻击了)")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("SYN 攻击")]),_._v(" 是什么?")]),_._v(" "),e("p",[e("strong",[_._v("SYN 攻击")]),_._v(": 就是 "),e("code",[_._v("Client")]),_._v(" 在短时间内伪造大量不存在的 "),e("code",[_._v("IP 地址")]),_._v("，并向 "),e("code",[_._v("Server")]),_._v(" 不断地发送 "),e("code",[_._v("SYN 包")]),_._v("，"),e("code",[_._v("Server")]),_._v(" 则回复确认包，并等待 "),e("code",[_._v("Client")]),_._v(" 确认，由于源地址不存在，因此 "),e("code",[_._v("Server")]),_._v(" 需要不断重发直至超时，这些伪造的 "),e("code",[_._v("SYN 包")]),_._v(" 将长时间占用"),e("code",[_._v("未连接队列")]),_._v("，导致正常的 "),e("code",[_._v("SYN")]),_._v(" 请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。"),e("code",[_._v("SYN 攻击")]),_._v(" 是一种典型的 "),e("code",[_._v("DoS/DDoS 攻击")]),_._v("。")]),_._v(" "),e("p",[_._v("在 "),e("code",[_._v("Linux/Unix")]),_._v(" 上可以使用系统自带的 "),e("code",[_._v("netstats")]),_._v(" 命令来检测 "),e("code",[_._v("SYN 攻击")]),_._v("。"),e("code",[_._v("netstat -n -p TCP | grep SYN_RECV")])]),_._v(" "),e("ul",[e("li",[_._v("常见的防御 "),e("code",[_._v("SYN 攻击")]),_._v(" 的方法有如下几种：\n"),e("ol",[e("li",[_._v("缩短超时（"),e("code",[_._v("SYN Timeout")]),_._v("）时间")]),_._v(" "),e("li",[_._v("增加最大半连接数")]),_._v(" "),e("li",[_._v("过滤网关防护")]),_._v(" "),e("li",[e("code",[_._v("SYN cookies")]),_._v(" 技术")])])])])]),_._v(" "),e("li",[e("p",[e("code",[_._v("TCP")]),_._v(" 的半关闭（"),e("code",[_._v("half-close")]),_._v("）")]),_._v(" "),e("p",[_._v("所谓的"),e("strong",[_._v("半关闭")]),_._v("，其实就是 "),e("code",[_._v("TCP")]),_._v(" 提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。")])])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/170723e5c0e05829~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp",alt:""}})]),_._v(" "),e("p",[_._v("刚开始双方处于 "),e("code",[_._v("ESTABLISHED")]),_._v(" 状态")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("客户端要断开了，向服务器发送 "),e("code",[_._v("FIN 报文")]),_._v("，发送后客户端变成了 "),e("code",[_._v("FIN-WAIT-1")]),_._v(" 状态。\n"),e("strong",[_._v("注意")]),_._v(", 这时候客户端同时也变成了 "),e("code",[_._v("half-close")]),_._v("(半关闭)状态，即无法向服务端发送报文，只能接收。")]),_._v(" "),e("ul",[e("li",[_._v("关闭 "),e("code",[_._v("TCP 连接")]),_._v("的挥手，客户端和服务端都可以发起关闭操作，以客户端发起为例:\n"),e("ol",[e("li",[_._v("浏览器先发送 "),e("code",[_._v("FIN 报文")]),_._v("、"),e("code",[_._v("Seq")]),_._v(" 初始化序列号给服务器，并停止发送数据，但仍可以接受服务端响应的数据")]),_._v(" "),e("li",[_._v("服务器收到后，发送 "),e("code",[_._v("ACK=浏览器序列号+1")]),_._v(" 给浏览器，表明收到")]),_._v(" "),e("li",[_._v("服务器数据都发完了，给浏览器发送 "),e("code",[_._v("FIN 报文")]),_._v("、"),e("code",[_._v("Seq")]),_._v(" 序列号给浏览器")]),_._v(" "),e("li",[_._v("浏览器收到后，发送 "),e("code",[_._v("ACK=服务器序列号+1")]),_._v(" 给服务器，表明收到")])])])])]),_._v(" "),e("li",[e("p",[_._v("为什么是 "),e("code",[_._v("四次挥手")]),_._v(" 而不是 "),e("code",[_._v("三次")]),_._v("？")]),_._v(" "),e("p",[_._v("因为服务端在接收到 "),e("code",[_._v("FIN")]),_._v(", 往往不会立即返回 "),e("code",[_._v("FIN")]),_._v(", 必须等到服务端所有的报文都发送完毕了，才能发 "),e("code",[_._v("FIN")]),_._v("。因此先发一个 "),e("code",[_._v("ACK")]),_._v(" 表示已经收到客户端的 "),e("code",[_._v("FIN")]),_._v("，延迟一段时间才发 "),e("code",[_._v("FIN")]),_._v("。这就造成了 "),e("code",[_._v("四次挥手")]),_._v("。")]),_._v(" "),e("ul",[e("li",[_._v("如果是 "),e("code",[_._v("三次挥手")]),_._v(" 会有什么问题？")])]),_._v(" "),e("p",[_._v("(等于说服务端将 "),e("code",[_._v("ACK")]),_._v(" 和 "),e("code",[_._v("FIN")]),_._v(" 的发送合并为一次挥手，这个时候 "),e("code",[_._v("长时间的延迟")]),_._v(" 可能会导致客户端误以为 "),e("code",[_._v("FIN")]),_._v(" 没有到达客户端，从而让客户端不断的重发 "),e("code",[_._v("FIN")]),_._v("。)")])]),_._v(" "),e("li",[e("p",[_._v("等待 "),e("code",[_._v("2MSL")]),_._v(" 的意义(为什么要等一段时间再关闭，不等不行吗？)")]),_._v(" "),e("p",[_._v("这是为了防止发送给服务器的确认报文段 "),e("code",[_._v("丢失")]),_._v(" 或者 "),e("code",[_._v("出错")]),_._v("，从而导致服务端不能正常关闭。等待时间是 "),e("code",[_._v("2MSL")]),_._v("，这也是报文在网络上的最大生存时间，超过这个时间就会被丢弃。"),e("code",[_._v("RFC793")]),_._v(" 中规定 "),e("code",[_._v("MSL")]),_._v(" 为 2 分钟，如果超过这个时间，那么主动关闭者就会发送一个 "),e("code",[_._v("RST")]),_._v(" 状态位的包，表示 "),e("code",[_._v("重置连接")]),_._v("，这时候被关闭者就知道对方已经关闭了连接。")])])]),_._v(" "),e("h2",{attrs:{id:"_12-知道第三方-cookie-吗？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-知道第三方-cookie-吗？","aria-hidden":"true"}},[_._v("#")]),_._v(" 12. 知道第三方 Cookie 吗？")]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("cookie")]),_._v(" 由哪些部分组成：")]),_._v(" "),e("ol",[e("li",[e("code",[_._v("Name")]),_._v(": 这个属性就表示 "),e("code",[_._v("cookie")]),_._v(" 的名字，每个 "),e("code",[_._v("cookie")]),_._v(" 的名字都是唯一的")]),_._v(" "),e("li",[e("code",[_._v("Value")]),_._v(": 这个属性表示 "),e("code",[_._v("cookie")]),_._v(" 的值")]),_._v(" "),e("li",[e("code",[_._v("Domain")]),_._v(": 就是 "),e("code",[_._v("cookie")]),_._v(" 所在的域名，如果没有设置 "),e("code",[_._v("domain")]),_._v(" 的话，那么 "),e("code",[_._v("cookie")]),_._v(" 会自动绑定到执行语句的当前域")]),_._v(" "),e("li",[e("code",[_._v("Path")]),_._v(": 这个属性的默认值是/，匹配的是路由，这里匹配的是路由的意思就是比如你的域名是 "),e("code",[_._v("www.xxx.xyz")]),_._v(",那么路由如果是 "),e("code",[_._v("www.xxx.xyz/auth/")]),_._v(",那么实际上 "),e("code",[_._v("cookie")]),_._v(" 绑定的是这个 "),e("code",[_._v("/auth")])]),_._v(" "),e("li",[e("code",[_._v("Max-age")]),_._v(": 这个属性是 "),e("code",[_._v("http1.1")]),_._v(" 新增的属性，用来替代 "),e("code",[_._v("expires")]),_._v(" 的，单位是秒，用来表示 "),e("code",[_._v("cookie")]),_._v(" 在多少秒之后会失效")]),_._v(" "),e("li",[e("code",[_._v("Secure")]),_._v(": 因为 "),e("code",[_._v("http")]),_._v(" 是无状态协议，而且 "),e("code",[_._v("http")]),_._v(" 在传输数据的过程中是以明文传输的，因此很容易遭到第三方网站的窃取，如果我们使用 "),e("code",[_._v("secure")]),_._v(" 的话，就能够确保 "),e("code",[_._v("cookie")]),_._v(" 是在 "),e("code",[_._v("https")]),_._v(" 协议下进行传输的，但是这不代表会将 "),e("code",[_._v("cookie")]),_._v(" 加密")]),_._v(" "),e("li",[e("code",[_._v("HttpOnly")]),_._v(": 只能通过 "),e("code",[_._v("HTTP")]),_._v(" 协议传输，不能通过 "),e("code",[_._v("JS 访问")]),_._v("。这个属性表示不能够被 "),e("code",[_._v("js 脚本")]),_._v("访问，因为 "),e("code",[_._v("js")]),_._v(" 能够通过 "),e("code",[_._v("document.cookie")]),_._v(" 来获取 "),e("code",[_._v("cookie")]),_._v("，所以使用 "),e("code",[_._v("HttpOnly")]),_._v(" 就能够阻止这种情况，在一定程度上防止 "),e("code",[_._v("xss 攻击")]),_._v("，也就是 "),e("code",[_._v("跨站脚本攻击")])]),_._v(" "),e("li",[e("code",[_._v("SameSite")]),_._v(": 用于限制第三方网站的 "),e("code",[_._v("cookie")]),_._v(" 发送机制("),e("code",[_._v("cookie")]),_._v(" 每次随着请求会自动发送到服务器去的，这就给了其他站点发起 "),e("code",[_._v("CSRF 攻击")]),_._v(" 和用户追踪的机会)\n"),e("strong",[_._v("具体如下")]),_._v("：\n"),e("ol",[e("li",[e("code",[_._v("Strict")]),_._v(": 最严格的模式，完全禁止跨站点请求时携带 "),e("code",[_._v("cookie")]),_._v("，设置为 "),e("code",[_._v("strict")]),_._v(" 之后，跨站行为都不会再携带 "),e("code",[_._v("cookie")])]),_._v(" "),e("li",[e("code",[_._v("Lax")]),_._v(": 相对 "),e("code",[_._v("strict 模式")]),_._v(" 会宽松一点儿，允许导航到三方网站时携带 "),e("code",[_._v("cookie")]),_._v("，即 "),e("code",[_._v("a 标签跳转")]),_._v("，"),e("code",[_._v("form 表单的 get 提交")]),_._v("，以及 "),e("code",[_._v("link 标签的 prerender")])]),_._v(" "),e("li",[e("code",[_._v("None")]),_._v(": 使用 "),e("code",[_._v("None")]),_._v(" 显示的关闭 "),e("code",[_._v("SameSite")]),_._v(" 模式控制，但是需要注意的是还需要加上 "),e("code",[_._v("secure")]),_._v("，即 "),e("code",[_._v("cookie")]),_._v(" 只会在 "),e("code",[_._v("HTTPS")]),_._v(" 中发送，如果只是设置了 "),e("code",[_._v("SameSite=None")]),_._v(" 是没有效果的")])])])])]),_._v(" "),e("li",[e("p",[e("code",[_._v("Cookie")]),_._v(" 的分类：")]),_._v(" "),e("p",[e("strong",[_._v("第一方 Cookie")]),_._v(" 和 "),e("strong",[_._v("第三方 Cookie")]),_._v("，这两类 "),e("code",[_._v("Cookie")]),_._v(" 都是网站保存在用户电脑上的一个文件，它们都由某个特定的域创建，并且只能被这个域访问")]),_._v(" "),e("p",[e("code",[_._v("第一方 Cookie")]),_._v(" 是由地址栏中列出的网站域设置的 "),e("code",[_._v("Cookie")]),_._v("，而 "),e("code",[_._v("第三方 Cookie")]),_._v(" 来自在网页上嵌入广告或图片等项的其他域来源。都是网站在客户端上存放的一小块数据。他们都由某个域存放，只能被这个域访问。")]),_._v(" "),e("p",[_._v("他们的区别其实并不是"),e("strong",[_._v("技术上")]),_._v("的区别，而是"),e("strong",[_._v("使用方式上")]),_._v("的区别。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("Cookie")]),_._v(" 的特性：")]),_._v(" "),e("ol",[e("li",[e("strong",[_._v("生命周期")]),_._v(": "),e("code",[_._v("Expires")]),_._v("(过期时间) 和 "),e("code",[_._v("Max-Age")]),_._v("(单位秒)设置")]),_._v(" "),e("li",[e("strong",[_._v("作用域")]),_._v(": "),e("code",[_._v("Domain")]),_._v(" 和 "),e("code",[_._v("Path")]),_._v(" 设置。"),e("strong",[_._v("注意")]),_._v("："),e("code",[_._v("/")]),_._v("表示域名下的任何路径都允许使用 "),e("code",[_._v("Cookie")])]),_._v(" "),e("li",[e("strong",[_._v("安全相关")]),_._v(" "),e("ol",[e("li",[_._v("如果带上 "),e("code",[_._v("Secure")]),_._v("，说明只能通过 "),e("code",[_._v("HTTPS")]),_._v(" 传输 "),e("code",[_._v("cookie")])]),_._v(" "),e("li",[_._v("如果 "),e("code",[_._v("cookie")]),_._v(" 字段带上 "),e("code",[_._v("HttpOnly")]),_._v("，说明只能通过 "),e("code",[_._v("HTTP")]),_._v(" 协议传输，不能通过 "),e("code",[_._v("JS 访问")]),_._v("。也是预防 "),e("code",[_._v("XSS 攻击")]),_._v(" 重要手段")]),_._v(" "),e("li",[e("code",[_._v("SameSite")]),_._v(" 属性有 "),e("code",[_._v("Strict")]),_._v("、"),e("code",[_._v("Lax")]),_._v("、"),e("code",[_._v("None")]),_._v("(默认)。也是预防 "),e("code",[_._v("CSRF 攻击")]),_._v(" 的重要手段")])])])])]),_._v(" "),e("li",[e("p",[e("code",[_._v("Cookie")]),_._v(" 的缺点：")]),_._v(" "),e("ol",[e("li",[e("strong",[_._v("容量缺陷")]),_._v("："),e("code",[_._v("Cookie")]),_._v(" 的体积上限只有 "),e("code",[_._v("4KB")]),_._v("，只能用来存储少量的信息")]),_._v(" "),e("li",[e("strong",[_._v("性能缺陷")]),_._v("："),e("code",[_._v("Cookie")]),_._v(" 紧跟域名，不管域名下面的某一个地址需不需要这个 "),e("code",[_._v("Cookie")]),_._v(" ，请求都会携带上完整的 "),e("code",[_._v("Cookie")]),_._v("，这样随着请求数的增多，其实会造成巨大的性能浪费的，因为请求携带了很多不必要的内容。但可以通过 "),e("code",[_._v("Domain")]),_._v(" 和 "),e("code",[_._v("Path")]),_._v(" 指定 "),e("code",[_._v("作用域")]),_._v(" 来解决。")]),_._v(" "),e("li",[e("strong",[_._v("安全缺陷")]),_._v("。由于 "),e("code",[_._v("Cookie")]),_._v(" 以 "),e("code",[_._v("纯文本")]),_._v(" 的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 "),e("code",[_._v("Cookie")]),_._v(" 的有效期内重新发送给服务器，这是相当危险的。另外，在 "),e("code",[_._v("HttpOnly")]),_._v(" 为 "),e("code",[_._v("false")]),_._v(" 的情况下，"),e("code",[_._v("Cookie")]),_._v(" 信息能直接通过 "),e("code",[_._v("JS 脚本")]),_._v(" 来读取。")])])])]),_._v(" "),e("h2",{attrs:{id:"_13-csrf-和-xss-、ssrf-的攻击原理-与防御措施？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-csrf-和-xss-、ssrf-的攻击原理-与防御措施？","aria-hidden":"true"}},[_._v("#")]),_._v(" 13. CSRF 和 XSS 、SSRF 的攻击原理 与防御措施？")]),_._v(" "),e("p",[e("code",[_._v("CSRF")]),_._v("（"),e("code",[_._v("Cross-site request forgery")]),_._v("）："),e("strong",[_._v("跨站请求伪造")]),_._v(": 是一种劫持受信任用户向服务器发送非预期请求的攻击方式")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("CSRF")]),_._v(" 的攻击原理")])]),_._v(" "),e("p",[e("img",{attrs:{src:"http://img.smyhvae.com/20180307_1735.png",alt:""}})]),_._v(" "),e("p",[_._v("从上图可以看出，要完成一次 "),e("code",[_._v("CSRF 攻击")]),_._v("，受害者必须满足 "),e("code",[_._v("两个必要的条件")]),_._v("：")]),_._v(" "),e("ol",[e("li",[_._v("登录受信任 "),e("code",[_._v("网站 A")]),_._v("，并在本地生成 "),e("code",[_._v("Cookie")]),_._v("。（如果用户没有登录 "),e("code",[_._v("网站 A")]),_._v("，那么"),e("code",[_._v("网站 B")]),_._v(" 在诱导的时候，请求"),e("code",[_._v("网站 A")]),_._v(" 的 "),e("code",[_._v("api 接口")]),_._v(" 时，会提示你登录）")]),_._v(" "),e("li",[_._v("在不登出 "),e("code",[_._v("A")]),_._v(" 的情况下，访问危险网站 "),e("code",[_._v("B")]),_._v("（其实是利用了 ∂"),e("code",[_._v("网站 A")]),_._v(" 的漏洞）")])]),_._v(" "),e("p",[e("strong",[_._v("温馨提示一下")]),_._v("："),e("code",[_._v("cookie")]),_._v(" 保证了用户可以处于登录状态，但"),e("code",[_._v("网站 B")]),_._v(" 其实拿不到 "),e("code",[_._v("cookie")])]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("CSRF")]),_._v(" 如何防御")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("方法一、"),e("code",[_._v("Token")]),_._v(" 验证：（用的最多）")]),_._v(" "),e("p",[_._v("服务器发送给客户端一个 "),e("code",[_._v("token")]),_._v("；客户端提交的表单中带着这个 "),e("code",[_._v("token")]),_._v("。如果这个 "),e("code",[_._v("token")]),_._v(" 不合法，那么服务器拒绝这个请求。")])]),_._v(" "),e("li",[e("p",[_._v("方法二、"),e("code",[_._v("隐藏令牌")]),_._v("：")]),_._v(" "),e("p",[_._v("把 "),e("code",[_._v("toke")]),_._v("n 隐藏在 "),e("code",[_._v("http")]),_._v(" 的 "),e("code",[_._v("head")]),_._v(" 头中。方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。")])]),_._v(" "),e("li",[e("p",[_._v("方法三、"),e("code",[_._v("Referer")]),_._v(" 验证：")]),_._v(" "),e("p",[e("code",[_._v("Referer")]),_._v(" 指的是页面请求来源。意思是，只接受本站的请求，服务器才做响应；如果不是，就拦截。")])])])])]),_._v(" "),e("p",[e("code",[_._v("XSS")]),_._v("（"),e("code",[_._v("Cross Site Scripting")]),_._v("）："),e("strong",[_._v("跨域脚本攻击")]),_._v(": 是指攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式")]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("XSS")]),_._v(" 的攻击原理")]),_._v(" "),e("p",[e("code",[_._v("XSS 攻击")]),_._v(" 的"),e("strong",[_._v("核心原理")]),_._v("是：不需要你做任何的登录认证，它会通过合法的操作（比如在 "),e("code",[_._v("url 中输入")]),_._v("、在 "),e("code",[_._v("评论框中输入")]),_._v("），向你的页面注入脚本（可能是 "),e("code",[_._v("js")]),_._v("、"),e("code",[_._v("html 代码块")]),_._v("等）。导致：盗用 "),e("code",[_._v("Cookie")]),_._v("、破坏页面的正常结构，插入广告等恶意内容、D-doss 攻击")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("XSS")]),_._v(" 的攻击方式")]),_._v(" "),e("ol",[e("li",[e("p",[e("strong",[_._v("反射型")])]),_._v(" "),e("p",[_._v("发出请求时，"),e("code",[_._v("XSS 代码")]),_._v(" 出现在 "),e("code",[_._v("url")]),_._v(" 中，作为输入提交到服务器端，服务器端解析后响应，"),e("code",[_._v("XSS 代码")]),_._v(" 随响应内容一起传回给浏览器，最后浏览器解析执行 "),e("code",[_._v("XSS")]),_._v(" 代码。这个过程像一次反射，所以叫"),e("code",[_._v("反射型 XSS")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("存储型")])]),_._v(" "),e("p",[e("code",[_._v("存储型 XSS")]),_._v(" 和 "),e("code",[_._v("反射型 XSS")]),_._v(" 的"),e("strong",[_._v("差别在于")]),_._v("，提交的代码会存储在服务器端（"),e("code",[_._v("数据库")]),_._v("、"),e("code",[_._v("内存")]),_._v("、"),e("code",[_._v("文件系统")]),_._v("等），下次请求时目标页面时不用再提交 "),e("code",[_._v("XSS 代码")])])])])]),_._v(" "),e("li",[e("p",[e("code",[_._v("XSS")]),_._v(" 的防范措施（"),e("code",[_._v("encode")]),_._v(" + "),e("code",[_._v("过滤")]),_._v("）")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("方法一、"),e("code",[_._v("编码")])]),_._v(" "),e("p",[_._v("对用户输入的数据进行 "),e("code",[_._v("HTML Entity")]),_._v(" 编码;把字符转换成 转义字符")])]),_._v(" "),e("li",[e("p",[_._v("方法二、"),e("code",[_._v("过滤")])]),_._v(" "),e("p",[_._v("移除用户输入的和事件相关的属性。如 onerror 可以自动触发攻击，还有 onclick 等。（"),e("strong",[_._v("总而言之")]),_._v("，过滤掉一些不安全的内容）\n移除用户输入的 "),e("code",[_._v("Style 节点")]),_._v("、"),e("code",[_._v("Script 节点")]),_._v("、"),e("code",[_._v("Iframe 节点")]),_._v("。（尤其是 Script 节点，它可是支持跨域的呀，一定要移除）")])]),_._v(" "),e("li",[e("p",[_._v("方法三、"),e("code",[_._v("校正")])]),_._v(" "),e("p",[_._v("避免直接对 "),e("code",[_._v("HTML Entity")]),_._v(" 进行解码; 使用 "),e("code",[_._v("DOM Parse")]),_._v(" 转换，校正不配对的 "),e("code",[_._v("DOM")]),_._v(" 标签")])])])]),_._v(" "),e("li",[e("p",[e("code",[_._v("CSRF")]),_._v(" 和 "),e("code",[_._v("XSS")]),_._v(" 的区别:")]),_._v(" "),e("ol",[e("li",[e("strong",[_._v("CSRF")]),_._v("：需要用户先登录 "),e("code",[_._v("网站 A")]),_._v("，获取 "),e("code",[_._v("cookie")]),_._v("; "),e("strong",[_._v("XSS")]),_._v("：不需要登录")]),_._v(" "),e("li",[e("code",[_._v("CSRF")]),_._v("：是利用"),e("code",[_._v("网站 A")]),_._v(" 本身的漏洞，去请求 "),e("code",[_._v("网站 A")]),_._v(" 的 "),e("code",[_._v("api")]),_._v(";"),e("strong",[_._v("XSS")]),_._v("：是向 "),e("code",[_._v("网站 A")]),_._v(" 注入 "),e("code",[_._v("JS 代码")]),_._v("，然后"),e("code",[_._v("执行 JS")]),_._v(" 里的代码，篡改 "),e("code",[_._v("网站 A")]),_._v(" 的内容")])])]),_._v(" "),e("li",[e("p",[_._v("SSRF")])])]),_._v(" "),e("p",[e("strong",[_._v("扩展")]),_._v("："),e("code",[_._v("v-html")]),_._v(" 的弊端？（利用 "),e("code",[_._v("innerHTML")]),_._v("）")]),_._v(" "),e("ol",[e("li",[_._v("可能会导致 "),e("code",[_._v("xss 攻击")])]),_._v(" "),e("li",[e("code",[_._v("v-html")]),_._v(" 会替换掉标签内部的子元素")])]),_._v(" "),e("h2",{attrs:{id:"_14-v8-中执行一段-js-代码的整个过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-v8-中执行一段-js-代码的整个过程","aria-hidden":"true"}},[_._v("#")]),_._v(" 14. V8 中执行一段 JS 代码的整个过程")]),_._v(" "),e("ol",[e("li",[_._v("首先通过 "),e("code",[_._v("词法分析")]),_._v(" 和 "),e("code",[_._v("语法分析")]),_._v(" 生成 "),e("code",[_._v("AST")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("词法分析")]),_._v(" 即 "),e("code",[_._v("分词")]),_._v("，它的工作就是将一行行的代码分解成一个个 "),e("code",[_._v("token")]),_._v("。")]),_._v(" "),e("li",[e("strong",[_._v("语法分析")]),_._v(" ，将生成的这些 "),e("code",[_._v("token")]),_._v(" 数据，根据一定的语法规则转化为 "),e("code",[_._v("AST")]),_._v("。")])])]),_._v(" "),e("li",[_._v("将 "),e("code",[_._v("AST")]),_._v(" 转换为 "),e("code",[_._v("字节码")])]),_._v(" "),e("li",[_._v("由 "),e("code",[_._v("解释器")]),_._v(" 逐行执行 "),e("code",[_._v("字节码")]),_._v(" ，遇到"),e("code",[_._v("热点代码")]),_._v("启动"),e("code",[_._v("编译器")]),_._v("进行编译，生成对应的"),e("code",[_._v("机器码")]),_._v(", 以优化执行效率\n（现在不用一次性将全部的字节码都转换成机器码，而是通过解释器来逐行执行字节码，省去了生成二进制文件的操作，这样就大大降低了内存的压力。）")])]),_._v(" "),e("p",[e("strong",[_._v("注意")]),_._v("：因为机器码相比字节码的体积太大，引发了严重的内存占用问题。机器只认识机器码")]),_._v(" "),e("p",[e("code",[_._v("JS 运行")]),_._v("可以分为 "),e("strong",[_._v("编译阶段")]),_._v(" 和 "),e("strong",[_._v("执行阶段")])]),_._v(" "),e("ul",[e("li",[e("p",[e("strong",[_._v("函数体内")]),_._v(" 的 "),e("code",[_._v("编译")]),_._v(" 四步曲，发生在函数 "),e("code",[_._v("执行之前")]),_._v(":")]),_._v(" "),e("ol",[e("li",[_._v("创建 "),e("code",[_._v("AO")]),_._v(" 对象, ("),e("code",[_._v("activation object")]),_._v(")")]),_._v(" "),e("li",[_._v("找"),e("code",[_._v("形参")]),_._v("和"),e("code",[_._v("变量")]),_._v("声明，将形参和变量声明作为 "),e("code",[_._v("AO")]),_._v(" 对象的属性名，值为 "),e("code",[_._v("undefined")])]),_._v(" "),e("li",[_._v("将"),e("code",[_._v("实参")]),_._v("和"),e("code",[_._v("形参")]),_._v("相统一")]),_._v(" "),e("li",[_._v("在函数体里找函数声明，将函数名作为 "),e("code",[_._v("AO")]),_._v(" 对象的属性名，值赋予函数体")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("全局下")]),_._v(" 的 "),e("code",[_._v("编译")]),_._v(" 三步曲，发生在代码 "),e("code",[_._v("最前面")]),_._v(":")]),_._v(" "),e("ol",[e("li",[_._v("创建 "),e("code",[_._v("GO")]),_._v(" 对象")]),_._v(" "),e("li",[_._v("找变量声明，将变量声明作为 "),e("code",[_._v("GO")]),_._v(" 对象的属性名，值赋予 "),e("code",[_._v("undefined")])]),_._v(" "),e("li",[_._v("找全局里的函数声明，将函数名作为 "),e("code",[_._v("GO")]),_._v(" 对象的属性名，值赋予函数体")])])])]),_._v(" "),e("h2",{attrs:{id:"_14-从输入-url-到页面展示经历了什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-从输入-url-到页面展示经历了什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 14. 从输入 URL 到页面展示经历了什么？")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("总体流程如下：")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("URL 解析\n完整的 URL："),e("code",[_._v("协议 + 主机 + 端口 + 路径 + 参数 + 锚点")]),_._v("。如果为非 url 结构的字符串，交给浏览器默认引擎去搜索改字符串；若为 url 结构的字符串，浏览器主进程会交给 网络进程 ,开始干活。")]),_._v(" "),e("ul",[e("li",[_._v("encodeURI 和 encodeURIComponent 的区别？\nencodeURI 是编码"),e("code",[_._v("整个URL")]),_._v("，而 encodeURIComponent 编码的是"),e("code",[_._v("参数")]),_._v("部分")])])]),_._v(" "),e("li",[e("p",[_._v("检查资源缓存\n在有效期内的缓存资源直接使用，称之为"),e("code",[_._v("强缓存")]),_._v("。返回 200，size 为 memory cache(资源从内存中取出)和 disk cache(资源从磁盘中取出)。当超过有效期的，则携带缓存的资源标识向服务器发起请求。返回 304，走"),e("code",[_._v("协商缓存")]),_._v(";返回 200,向服务器发起请求，将结果缓存起来，为下一次使用\n"),e("strong",[_._v("通常来说")]),_._v("：刷新页面会使用"),e("code",[_._v("内存缓存")]),_._v("; 关闭后重新打开会使用"),e("code",[_._v("磁盘缓存")])])]),_._v(" "),e("li",[e("p",[_._v("DNS 解析：将域名解析成 IP 地址\n如果没有成功使用本地缓存，则需要发起网络请求，发起之前要做 DNS 解析，会依次搜索："),e("code",[_._v("浏览器DNS缓存 -> 操作系统DNS缓存 -> 路由器DNS缓存 -> 服务商DNS服务器查询 -> 全球13台根域名服务器查询")])]),_._v(" "),e("p",[_._v("解析域名的查找过程：浏览器的 DNS 缓存 -> 操作系统的 DNS 缓存 -> 本地域名服务器("),e("strong",[_._v("递归查询自己的 DNS 缓存")]),_._v(") -> 上级域名服务器("),e("strong",[_._v("进行迭代查询")]),_._v(")【本地域名服务器 -> 根域名服务器(会返回顶级域名的服务器地址); 本地域名服务器 -> 顶级域名服务器(返回权威域名服务器地址，全球 13 台) 】 -》解析到的 IP 地址返回给操作系统，并缓存起来。-》操作系统将 IP 地址返回给浏览器，并缓存起来，供下次使用。")]),_._v(" "),e("p",[_._v("为了节约时间，可以在 HTML 头部做 DNS 的预解析：")]),_._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[_._v("\x3c!-- 在HTTPS下开启 --\x3e")]),_._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("<")]),_._v("meta")]),_._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[_._v("http-equiv")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v('"')]),_._v("x-dns-prefetch-control"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v('"')])]),_._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[_._v("content")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v('"')]),_._v("on"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v('"')])]),_._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("/>")])]),_._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("<")]),_._v("link")]),_._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[_._v("rel")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v('"')]),_._v("dns-prefetch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v('"')])]),_._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[_._v("href")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v('"')]),_._v("http://www.baidu.com"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v('"')])]),_._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("/>")])]),_._v("\n")])])]),e("p",[_._v("为了保证响应的及时，DNS 解析使用的是 UDP 协议。浏览器根据自定义的规则，提前去解析后面可能用到的域名，来加速网站的访问速度。")]),_._v(" "),e("p",[e("strong",[_._v("注意")]),_._v("：a 标签的 href 是可以在 chrome。firefox 包括高版本的 IE，但是在 HTTPS 下面不起作用，需要 meta 来强制开启功能。")])]),_._v(" "),e("li",[e("p",[_._v("TCP 连接：TCP 三次握手")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("三次握手过程：")]),_._v(" "),e("ol",[e("li",[_._v("客户端发送一个带 SYN=1, Seq=X 的数据包到服务器（第一次握手，由浏览器发起，告诉服务器，我要发送请求了）")]),_._v(" "),e("li",[_._v("服务器返回一个带 SYN=1, Ack=X+1, Seq=Y 的响应包确认信息给浏览器（第二次握手，由服务器发起，告诉浏览器我准备好了，你发吧）")]),_._v(" "),e("li",[_._v("客户端回传一个带 ACK=Y+1, Seq=Z 的数据包，代表”握手结束“（第三次握手，由浏览器发起，告诉浏览器，我马上就发了，准备接受吧）")])]),_._v(" "),e("p",[e("strong",[_._v("扩展")]),_._v("：为啥要三次握手？"),e("strong",[_._v("目的")]),_._v("：为了防止已失效的连接请求报文突然又传送到服务器，因而产生错误。")])])])]),_._v(" "),e("li",[e("p",[_._v("发送 HTTP 请求")])]),_._v(" "),e("li",[e("p",[_._v("服务器处理请求并返回 HTTP 报文")])]),_._v(" "),e("li",[e("p",[_._v("浏览器解析并渲染页面")])]),_._v(" "),e("li",[e("p",[_._v("断开 TCP 连接：TCP 四次挥手")]),_._v(" "),e("ul",[e("li",[_._v("四次挥手过程：\n"),e("ol",[e("li",[_._v("主动方发送一个 Fin=1 结束标志位，Ack=Z 组成的报文，并发送 Seq=X 序列号。并进入到 FIN_WAIT_1 状态（第一次挥手：由浏览器发起的，发送给服务器，我请求报文发送完了，你准备关闭吧）")]),_._v(" "),e("li",[_._v("被动方发送 ACK=X+1 确认标志位报文，并发送 Seq=Z 的序列号。表示同意关闭请求。此时主机发起方进入 FIN_WAIT_2 阶段。（第二次挥手：由服务器发起的，告诉浏览器，我请求报文接受完了，我准备关闭了，你也准备吧）")]),_._v(" "),e("li",[_._v("被动方发送 Fin=1 结束标志位，Ack=X 组成的报文，并发送 Seq=Y 的序列号。进入 LAST_ACK 状态(第三次挥手：由服务器发起，告诉浏览器，我响应报文发送完了，你准备关闭吧)")]),_._v(" "),e("li",[_._v("发送方发送 ACK=Y 确认标志位报文，并发送 Seq=Z 的序列号。进入等待 TIME_WAIT 状态。被动方收到发起方的报文段以后关闭连接。发起方等待一定时间未收到回复，则正常关闭。(第四次挥手：由浏览器发起，告诉服务器，我响应报文接受完了，我准备关闭了，你也准备吧)")])])])])])])])]),_._v(" "),e("h2",{attrs:{id:"_15-说说浏览器渲染原理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-说说浏览器渲染原理？","aria-hidden":"true"}},[_._v("#")]),_._v(" 15. 说说浏览器渲染原理？")]),_._v(" "),e("p",[_._v("整个渲染流程，从 "),e("code",[_._v("HTML")]),_._v(" 到 "),e("code",[_._v("DOM")]),_._v("、"),e("code",[_._v("样式计算")]),_._v("、"),e("code",[_._v("布局")]),_._v("、"),e("code",[_._v("图层")]),_._v("、"),e("code",[_._v("绘制")]),_._v("、"),e("code",[_._v("光栅化")]),_._v("、"),e("code",[_._v("合成")]),_._v("和"),e("code",[_._v("显示")])]),_._v(" "),e("ul",[e("li",[e("p",[_._v("解析 "),e("code",[_._v("HTML")]),_._v("，生成 "),e("code",[_._v("DOM")]),_._v(" 树。解析 "),e("code",[_._v("CSS")]),_._v("，生成 "),e("code",[_._v("CSSOM")]),_._v(" 树")]),_._v(" "),e("p",[_._v("浏览器从磁盘或网络读取 "),e("code",[_._v("HTML")]),_._v(" 的原始字节，并根据文件的指定编码（例如 "),e("code",[_._v("UTF-8")]),_._v("）将它们转换成字符串。")]),_._v(" "),e("p",[e("strong",[_._v("DOM 树构建步骤")]),_._v("："),e("code",[_._v("字节数据")]),_._v(" =》"),e("code",[_._v("字符串")]),_._v(" =》 "),e("code",[_._v("Token")]),_._v(" => "),e("code",[_._v("Node")]),_._v("(节点对象) =》 "),e("code",[_._v("DOM")])]),_._v(" "),e("p",[_._v("生成节点对象并构建 "),e("code",[_._v("DOM")]),_._v("，每个 "),e("code",[_._v("Token")]),_._v(" 被生成后，会立刻消耗这个 "),e("code",[_._v("Token")]),_._v(" 创建出节点对象。"),e("strong",[_._v("注意")]),_._v("：带有结束标签标识的 Token 不会创建节点对象。")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("关于 "),e("code",[_._v("CSS 样式")]),_._v("，它的来源一般是三种:")]),_._v(" "),e("ol",[e("li",[e("code",[_._v("link 标签")]),_._v(" 引用")]),_._v(" "),e("li",[e("code",[_._v("style 标签")]),_._v(" 中的样式")]),_._v(" "),e("li",[_._v("元素的"),e("code",[_._v("内嵌 style 属性")])])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("格式化样式表")]),_._v("：首先，浏览器是无法直接识别 CSS 样式文本的，因此渲染引擎接收到 "),e("code",[_._v("CSS 文本")]),_._v(" 之后第一件事情就是将其转化为一个结构化的对象，即 "),e("code",[_._v("styleSheets")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("标准化样式属性")]),_._v("：有一些 "),e("code",[_._v("CSS 样式")]),_._v(" 的数值并不容易被渲染引擎所理解，因此需要在计算样式之前将它们标准化，如 "),e("code",[_._v("em->px")]),_._v(","),e("code",[_._v("red->#ff0000")]),_._v(", "),e("code",[_._v("bold->700")]),_._v(" 等等。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("计算每个节点的具体样式")]),_._v("：样式已经被 "),e("code",[_._v("格式化")]),_._v(" 和 "),e("code",[_._v("标准化")]),_._v(", 接下来就可以计算每个节点的具体样式信息了。计算的方式也并不复杂，主要就是两个规则: "),e("strong",[_._v("继承")]),_._v("和"),e("strong",[_._v("层叠")]),_._v("。")]),_._v(" "),e("ol",[e("li",[_._v("每个子节点都会默认 "),e("code",[_._v("继承父节点")]),_._v(" 的样式属性，如果父节点中没有找到，就会采用 "),e("code",[_._v("浏览器默认样式")]),_._v("，也叫 "),e("code",[_._v("UserAgent 样式")]),_._v("。这就是 "),e("strong",[_._v("继承规则")])]),_._v(" "),e("li",[_._v("然后是 "),e("code",[_._v("层叠规则")]),_._v("，"),e("code",[_._v("CSS")]),_._v(" 最大的特点在于它的层叠性，也就是最终的样式取决于各个属性共同作用的效果\n"),e("strong",[_._v("注意")]),_._v("：在计算完样式之后，所有的样式值会被挂在到 "),e("code",[_._v("window.getComputedStyle")]),_._v(" 当中，也就是可以通过 "),e("code",[_._v("JS")]),_._v(" 来获取计算后的样式")])])])])]),_._v(" "),e("li",[e("p",[_._v("将 "),e("code",[_._v("DOM 树")]),_._v(" 和 "),e("code",[_._v("CSS 树")]),_._v(" 结合，生成 "),e("code",[_._v("渲染/布局树")]),_._v("（"),e("code",[_._v("Render Tree")]),_._v("）\nChrome 团队已经做了大量的重构，已经没有生成 "),e("code",[_._v("Render Tree")]),_._v(" 的过程了。而布局树的信息已经非常完善，完全拥有 "),e("code",[_._v("Render Tree")]),_._v(" 的功能。")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("布局树")]),_._v(" 生成的大致工作如下:\n"),e("ol",[e("li",[_._v("遍历生成的 "),e("code",[_._v("DOM 树")]),_._v(" 节点，并把他们添加到布局树中。")]),_._v(" "),e("li",[_._v("计算布局树节点的坐标位置。")])])])])]),_._v(" "),e("li",[e("p",[e("code",[_._v("Layout")]),_._v(" (回流)：根据生成的渲染树，进行 "),e("code",[_._v("回流")]),_._v("（Layout）,得到节点的几何信息（位置、大小）")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("Painting")]),_._v(" (重绘)：根据渲染树以及回流得到节点的几何信息，从而得到节点的绝对像素")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("Display")]),_._v("：将像素发送给 "),e("code",[_._v("GPU")]),_._v("。展示在页面上")])])]),_._v(" "),e("p",[e("strong",[_._v("注意")]),_._v("：渲染树只包含"),e("strong",[_._v("可见的")]),_._v("节点")]),_._v(" "),e("p",[e("strong",[_._v("扩展")]),_._v("：为了构建渲染树，浏览器主要完成了以下工作：")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("从 "),e("code",[_._v("DOM 树")]),_._v(" 的根节点开始遍历每个 "),e("code",[_._v("可见节点")])])]),_._v(" "),e("li",[e("p",[_._v("对于每个可见的节点，找到 "),e("code",[_._v("CSSOM 树")]),_._v(" 中对于的规则，并应用它们")])]),_._v(" "),e("li",[e("p",[_._v("根据每个可见节点以及其对应的样式，组合生成渲染树")]),_._v(" "),e("ul",[e("li",[_._v("不可见的节点包括：\n"),e("ol",[e("li",[_._v("一些不会渲染输出的节点：如："),e("code",[_._v("script")]),_._v("、"),e("code",[_._v("link")]),_._v("、"),e("code",[_._v("meta")]),_._v(" 等")]),_._v(" "),e("li",[_._v("一些通过 "),e("code",[_._v("CSS")]),_._v(" 进行隐藏的节点：如："),e("code",[_._v("display: none")])])])])])])]),_._v(" "),e("p",[e("strong",[_._v("注意")]),_._v("：利用 "),e("code",[_._v("visible")]),_._v(" 和 "),e("code",[_._v("opacity")]),_._v(" 隐藏节点，还是会显示在渲染树上的")]),_._v(" "),e("p",[e("strong",[_._v("分层")]),_._v("：渲染引擎给页面分了很多图层，这些图层按照一定顺序叠加在一起，就形成了最终的页面。完成图层树的构建后，渲染引擎会对图层树中的每个图层进行绘制，为图层绘制。然后进行栅格化（raster）操作（绘制列表只是用来记录绘制顺序和绘制指令的列表，而实际上绘制操作是由渲染引擎中的合成线程来完成的），最后合成与显示。")]),_._v(" "),e("p",[e("strong",[_._v("扩展")]),_._v("：CSS 加载会阻塞页面显示吗？")]),_._v(" "),e("ol",[e("li",[_._v("css 加载不会阻塞 DOM 树的解析")]),_._v(" "),e("li",[_._v("css 加载会阻塞 DOM 树的渲染")]),_._v(" "),e("li",[_._v("css 加载会阻塞后面 js 语句的执行")])]),_._v(" "),e("p",[_._v("so, 为了防止 css 阻塞，引起页面白屏，可以提高页面加载速度:")]),_._v(" "),e("ol",[e("li",[_._v("使用 cdn")]),_._v(" "),e("li",[_._v("对 css 进行压缩")]),_._v(" "),e("li",[_._v("合理利用缓存")]),_._v(" "),e("li",[_._v("减少 http 请求，将多个 css 文件合并")])]),_._v(" "),e("h2",{attrs:{id:"_16-前端需要注意哪些-seo？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-前端需要注意哪些-seo？","aria-hidden":"true"}},[_._v("#")]),_._v(" 16. 前端需要注意哪些 SEO？")]),_._v(" "),e("ol",[e("li",[_._v("合理的 "),e("code",[_._v("title")]),_._v("、"),e("code",[_._v("description")]),_._v("、"),e("code",[_._v("keywords")])]),_._v(" "),e("li",[_._v("语义化 "),e("code",[_._v("HTML 代码")])]),_._v(" "),e("li",[_._v("重要内容 "),e("code",[_._v("HTML 代码")]),_._v(" 放在前面（搜索引擎抓取 "),e("code",[_._v("HTML")]),_._v(" 顺序是从上到下），不要用 "),e("code",[_._v("js 输出")]),_._v("（爬虫不会执行 js）")]),_._v(" "),e("li",[_._v("少用 "),e("code",[_._v("iframe")]),_._v("（搜索引擎不会抓取 `iframe 中的内容）")]),_._v(" "),e("li",[_._v("非装饰性图片必须加 "),e("code",[_._v("alt")])]),_._v(" "),e("li",[_._v("提高网站速度（网站速度是搜索引擎排序的一个重要指标）")])]),_._v(" "),e("h2",{attrs:{id:"_17-什么是堆？什么是栈？它们之间有什么区别和联系？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-什么是堆？什么是栈？它们之间有什么区别和联系？","aria-hidden":"true"}},[_._v("#")]),_._v(" 17. 什么是堆？什么是栈？它们之间有什么区别和联系？")]),_._v(" "),e("p",[_._v("堆和栈的概念存在于"),e("code",[_._v("数据结构")]),_._v("中和"),e("code",[_._v("操作系统内存")]),_._v("中。")]),_._v(" "),e("ul",[e("li",[_._v("在数据结构中，栈中数据的存取方式为 "),e("code",[_._v("先进后出")]),_._v("。而堆是一个"),e("code",[_._v("优先队列")]),_._v("，是按优先级来进行排序的，优先级可以按照大小来规定。完全 二叉树是堆的一种实现方式。")]),_._v(" "),e("li",[_._v("在操作系统中，内存被分为"),e("code",[_._v("栈区")]),_._v("和"),e("code",[_._v("堆区")]),_._v("。栈区内存由"),e("code",[_._v("编译器自动分 配释放")]),_._v("，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。堆区内存一般由"),e("code",[_._v("程序员分配释放")]),_._v("，若程序员不释放，程序结束时可能由"),e("code",[_._v("垃圾回收机制回收")]),_._v("。")])])])}],!1,null,null,null);v.default=c.exports}}]);