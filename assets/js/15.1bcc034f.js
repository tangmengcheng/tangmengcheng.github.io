(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{213:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("vue")]),t._v(" 项目中，和后台交互获取数据这块，我们通常使用的是 "),e("code",[t._v("axios")]),t._v(" 库，它是基于 "),e("code",[t._v("promise")]),t._v(" 的 "),e("code",[t._v("http")]),t._v(" 库，可运行在浏览器端和 "),e("code",[t._v("node.js")]),t._v(" 中。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换 "),e("code",[t._v("json")]),t._v("、客户端防御 "),e("code",[t._v("XSRF")]),t._v(" 等。所以我们的尤大大也是果断放弃了对其官方库 "),e("code",[t._v("vue-resource")]),t._v(" 的维护，直接推荐我们使用 "),e("code",[t._v("axios")]),t._v(" 库。"),e("a",{attrs:{href:"http://www.axios-js.com/",title:"axios 文档",target:"_blank",rel:"noopener noreferrer"}},[t._v("axios 文档"),e("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"axios-的封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#axios-的封装","aria-hidden":"true"}},[this._v("#")]),this._v(" Axios 的封装")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/pfCCZhlbMQRY1iccd8OibaX0iaqkwRzY1hHo8fFlxJCE6SuZWGz1BMT2gr2H9ibm20Cm9ewM2WS945E9YzpealGmwA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("一、axios 的封装")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[this._v("#")]),this._v(" 安装")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("npm install axios; // 安装axios\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"引入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引入","aria-hidden":"true"}},[this._v("#")]),this._v(" 引入")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("一般我会在项目的 "),e("code",[t._v("src")]),t._v(" 目录中，新建一个 "),e("code",[t._v("request")]),t._v(" 文件夹，然后在里面新建一个 "),e("code",[t._v("http.js")]),t._v(" 和一个 "),e("code",[t._v("api.js")]),t._v(" 文件。"),e("code",[t._v("http.js")]),t._v(" 文件用来封装我们的 "),e("code",[t._v("axios")]),t._v("，"),e("code",[t._v("api.js")]),t._v(" 用来统一管理我们的接口")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("// 在http.js中引入axios\nimport axios from 'axios'; // 引入axios\nimport QS from 'qs'; // 引入qs模块，用来序列化post类型的数据，后面会提到\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"环境的切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境的切换","aria-hidden":"true"}},[this._v("#")]),this._v(" 环境的切换")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("项目环境可能有开发环境、测试环境和生产环境。我们通过 "),s("code",[this._v("node")]),this._v(" 的环境变量来匹配我们的默认的接口 "),s("code",[this._v("url")]),this._v(" 前缀")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("// 环境的切换\nif (process.env.NODE_ENV == 'development') {\n    axios.defaults.baseURL = 'https://www.baidu.com';}\nelse if (process.env.NODE_ENV == 'debug') {\n    axios.defaults.baseURL = 'https://www.ceshi.com';\n}\nelse if (process.env.NODE_ENV == 'production') {\n    axios.defaults.baseURL = 'https://www.production.com';\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"设置请求超时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置请求超时","aria-hidden":"true"}},[this._v("#")]),this._v(" 设置请求超时")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过 "),s("code",[this._v("axios.defaults.timeout")]),this._v(" 设置默认的请求超时时间。例如超过了 "),s("code",[this._v("20s")]),this._v("，就会告知用户当前请求超时，请刷新等提示")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("axios.defaults.timeout = 20000;\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"post-请求头的设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#post-请求头的设置","aria-hidden":"true"}},[this._v("#")]),this._v(" post 请求头的设置")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("post")]),this._v(" 请求的时候，我们需要加上一个请求头，所以可以在这里进行一个默认的设置，即设置 "),s("code",[this._v("post")]),this._v(" 的请求头为 "),s("code",[this._v("application/x-www-form-urlencoded;charset=UTF-8")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"请求拦截"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求拦截","aria-hidden":"true"}},[this._v("#")]),this._v(" 请求拦截")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("import store from '@/store/index';\n\n// 请求拦截器\naxios.interceptors.request.use(\n    config => {\n        // 每次发送请求之前判断vuex中是否存在token\n        // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况\n        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n        const token = store.state.token;\n        token && (config.headers.Authorization = token);\n        return config;\n    },\n    error => {\n        return Promise.error(error);\n})\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"响应的拦截"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应的拦截","aria-hidden":"true"}},[this._v("#")]),this._v(" 响应的拦截")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。比如：如果后台返回的状态码是 "),s("code",[this._v("200")]),this._v("，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("// 响应拦截器\naxios.interceptors.response.use(\n    response => {\n        // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\n        // 否则的话抛出错误\n        if (response.status === 200) {\n            return Promise.resolve(response);\n        } else {\n            return Promise.reject(response);\n        }\n    },\n    // 服务器状态码不是2开头的的情况\n    // 这里可以跟你们的后台开发人员协商好统一的错误状态码\n    // 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等\n    // 下面列举几个常见的操作，其他需求可自行扩展\n    error => {\n        if (error.response.status) {\n            switch (error.response.status) {\n                // 401: 未登录\n                // 未登录则跳转登录页面，并携带当前页面的路径\n                // 在登录成功后返回当前页面，这一步需要在登录页操作。\n                case 401:\n                    router.replace({\n                        path: '/login',\n                        query: {\n                            redirect: router.currentRoute.fullPath\n                        }\n                    });\n                    break;\n\n                // 403 token过期\n                // 登录过期对用户进行提示\n                // 清除本地token和清空vuex中token对象\n                // 跳转登录页面\n                case 403:\n                     Toast({\n                        message: '登录过期，请重新登录',\n                        duration: 1000,\n                        forbidClick: true\n                    });\n                    // 清除token\n                    localStorage.removeItem('token');\n                    store.commit('loginSuccess', null);\n                    // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\n                    setTimeout(() => {\n                        router.replace({\n                            path: '/login',\n                            query: {\n                                redirect: router.currentRoute.fullPath\n                            }\n                        });\n                    }, 1000);\n                    break;\n\n                // 404请求不存在\n                case 404:\n                    Toast({\n                        message: '网络请求不存在',\n                        duration: 1500,\n                        forbidClick: true\n                    });\n                    break;\n                // 其他错误，直接抛出错误提示\n                default:\n                    Toast({\n                        message: error.response.data.message,\n                        duration: 1500,\n                        forbidClick: true\n                    });\n            }\n            return Promise.reject(error.response);\n        }\n    }\n});\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("注意")]),this._v("："),s("code",[this._v("Toast")]),this._v(" 根据自己的 "),s("code",[this._v("UI")]),this._v(" 选定即可")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"封装-get-方法和-post-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装-get-方法和-post-方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 封装 get 方法和 post 方法")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("一、"),e("strong",[t._v("get 方法")]),t._v("：我们通过定义一个 "),e("code",[t._v("get")]),t._v(" 函数，"),e("code",[t._v("get")]),t._v(" 函数有两个参数，第一个参数表示我们要请求的 "),e("code",[t._v("url")]),t._v(" 地址，第二个参数是我们要携带的请求参数。"),e("code",[t._v("get")]),t._v(" 函数返回一个 "),e("code",[t._v("promise")]),t._v(" 对象，当 "),e("code",[t._v("axios")]),t._v(" 其请求成功时 "),e("code",[t._v("resolve")]),t._v(" 服务器返回 值，请求失败时 "),e("code",[t._v("reject")]),t._v(" 错误值。最后通过 "),e("code",[t._v("export")]),t._v(" 抛出 "),e("code",[t._v("get")]),t._v(" 函数。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * get方法，对应get请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" params")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    axios\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("二、**post 方法：**原理同 "),e("code",[t._v("get")]),t._v(" 基本一样，但是要注意的是，"),e("code",[t._v("post")]),t._v(" 方法必须要使用对提交从参数对象进行序列化的操作，所以这里我们通过 "),e("code",[t._v("node")]),t._v(" 的 "),e("code",[t._v("qs")]),t._v(" 模块来序列化我们的参数。这个很重要，如果没有序列化操作，后台是拿不到你提交的数据的。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * post方法，对应post请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("post")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" params")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    axios\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("post")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("QS")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[e("strong",[t._v("注意")]),t._v("："),e("code",[t._v("axios.get()")]),t._v(" 方法和 "),e("code",[t._v("axios.post()")]),t._v(" 在提交数据时参数的书写方式还是有区别的。区别就是，"),e("code",[t._v("get")]),t._v(" 的第二个参数是一个 "),e("code",[t._v("{}")]),t._v("，然后这个对象的 "),e("code",[t._v("params")]),t._v(" 属性值是一个参数对象的。而 "),e("code",[t._v("post")]),t._v(" 的第二个参数就是一个参数对象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/pfCCZhlbMQRY1iccd8OibaX0iaqkwRzY1hHhNOEyXZY6r0daYZ9oZZ4d5zAa2uzZx75tG1ERyOrCpibqWjm0Ym6YnA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:""}})])}],!1,null,null,null);s.default=n.exports}}]);